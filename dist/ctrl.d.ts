import { MetricsPanelCtrl } from "app/plugins/sdk";
import "./css/polystat.css!";
import { D3Wrapper } from "./d3wrapper";
import { PolystatModel } from "./polystatmodel";
import { MetricOverridesManager, MetricOverride } from "./metric_overrides_manager";
import { CompositesManager } from "./composites_manager";
declare class D3PolystatPanelCtrl extends MetricsPanelCtrl {
    private $sanitize;
    static templateUrl: string;
    animationModes: {
        value: string;
        text: string;
    }[];
    displayModes: {
        value: string;
        text: string;
    }[];
    thresholdStates: {
        value: number;
        text: string;
    }[];
    shapes: {
        value: string;
        text: string;
    }[];
    fontSizes: number[];
    unitFormats: any;
    operatorOptions: {
        value: string;
        text: string;
    }[];
    sortDirections: {
        value: string;
        text: string;
    }[];
    sortFields: {
        value: string;
        text: string;
    }[];
    dataRaw: any;
    polystatData: PolystatModel[];
    scoperef: any;
    alertSrvRef: any;
    initialized: boolean;
    panelContainer: any;
    d3Object: D3Wrapper;
    data: any;
    series: any[];
    templateSrv: any;
    overridesCtrl: MetricOverridesManager;
    compositesManager: CompositesManager;
    tooltipContent: string[];
    d3DivId: string;
    containerDivId: string;
    svgContainer: any;
    panelWidth: any;
    panelHeight: any;
    panelDefaults: {
        savedComposites: any[];
        savedOverrides: MetricOverride[];
        colors: string[];
        polystat: {
            animationSpeed: number;
            columns: string;
            columnAutoSize: boolean;
            displayLimit: number;
            defaultClickThrough: string;
            defaultClickThroughSanitize: boolean;
            fontAutoScale: boolean;
            fontSize: number;
            fontType: string;
            globalUnitFormat: string;
            globalDecimals: number;
            globalDisplayMode: string;
            globalOperatorName: string;
            globalDisplayTextTriggeredEmpty: string;
            gradientEnabled: boolean;
            hexagonSortByDirection: string;
            hexagonSortByField: string;
            maxMetrics: number;
            polygonBorderSize: number;
            polygonBorderColor: string;
            polygonGlobalFillColor: string;
            radius: string;
            radiusAutoSize: boolean;
            rows: string;
            rowAutoSize: boolean;
            shape: string;
            tooltipDisplayMode: string;
            tooltipDisplayTextTriggeredEmpty: string;
            tooltipFontSize: number;
            tooltipFontType: string;
            tooltipPrimarySortDirection: string;
            tooltipPrimarySortField: string;
            tooltipSecondarySortDirection: string;
            tooltipSecondarySortField: string;
            tooltipTimestampEnabled: boolean;
        };
    };
    constructor($scope: any, $injector: any, templateSrv: any, alertSrv: any, $sanitize: any);
    onInitEditMode(): void;
    setContainer(container: any): void;
    getPanelWidthFailsafe(): number;
    getPanelHeight(): number;
    clearSVG(): void;
    renderD3(): void;
    removeValueMap(map: any): void;
    addValueMap(): void;
    removeRangeMap(rangeMap: any): void;
    addRangeMap(): void;
    link(scope: any, elem: any, attrs: any, ctrl: any): void;
    setValues(dataList: any): void;
    applyGlobalFormatting(data: any): void;
    filterByGlobalDisplayMode(data: any): any;
    onDataError(err: any): void;
    onDataReceived(dataList: any): void;
    seriesHandler(seriesData: any): any;
    invertColorOrder(): void;
    validateAnimationSpeed(): void;
    validateColumnValue(): void;
    validateRowValue(): void;
    validateRadiusValue(): void;
    validateBorderSizeValue(): void;
    updatePolygonBorderColor(): void;
    updatePolygonGlobalFillColor(): void;
    getDefaultClickThrough(index: number): any;
    setGlobalUnitFormat(subItem: any): void;
}
export { D3PolystatPanelCtrl, D3PolystatPanelCtrl as MetricsPanelCtrl };
