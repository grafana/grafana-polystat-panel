{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"@grafana/data\"","webpack:///external \"d3\"","webpack:///external \"@grafana/ui\"","webpack:///external \"app/core/utils/kbn\"","webpack:///external \"jquery\"","webpack:///external \"app/plugins/sdk\"","webpack:///external \"app/core/time_series2\"","webpack:///external \"app/core/config\"","webpack:///external \"app/core/core_module\"","webpack:///../node_modules/tslib/tslib.es6.js","webpack:///../node_modules/d3-hexbin/src/hexbin.js","webpack:///./utils.ts","webpack:///./color.ts","webpack:///./types.ts","webpack:///./layoutManager.ts","webpack:///./d3wrapper.ts","webpack:///./flatten.ts","webpack:///./polystatmodel.ts","webpack:///./transformers.ts","webpack:///./threshold_processor.ts","webpack:///./clickThroughTransformer.ts","webpack:///./metric_overrides_manager.ts","webpack:///./composites_manager.ts","webpack:///./tooltip.ts","webpack:///./core/data_processor.ts","webpack:///./data/deframer.ts","webpack:///./ctrl.ts","webpack:///./core/dataframe.ts","webpack:///./thresholdsCtrl.ts","webpack:///./module.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__9__","extendStatics","b","setPrototypeOf","__proto__","Array","__assign","assign","arguments","length","apply","this","__values","iterator","next","done","TypeError","__read","e","ar","push","error","thirdPi","Math","PI","angles","pointX","pointY","GetDecimalsForValue","panelDecimals","isNumber","decimals","scaledDecimals","size","delta","dec","floor","log","LN10","magn","pow","norm","result","max","getTextWidth","text","font","context","document","createElement","getContext","measureText","width","RGBToHex","startsWith","hex","split","map","x","parseInt","toString","join","PolygonShapes","g","asHex","slice","asRGB","blendWith","col","a","Color","round","Mul","rgb","sep","indexOf","R","substr","RGBAToHex","orig","replace","match","alpha","trim","parseFloat","fromHex","substring","bigint","createGradients","data","gradients","purelight","aColorStart","useColor","color","aColorEnd","start","end","height","numColumns","numRows","displayLimit","autoSize","shape","SQRT3","maxColumnsUsed","maxRowsUsed","radius","setRadius","setHeight","setWidth","generateHexagonPointedTopLayout","getHexFlatTopRadius","generateUniformLayout","getUniformRadius","hexRadius","truncateFloat","getHexFlatTopDiameters","diameterX","diameterY","getUniformDiameters","horizontalMax","verticalMax","uniformRadius","generatePossibleColumnAndRowsSizes","columnAutoSize","rowAutoSize","dataSize","squared","sqrt","ceil","generateActualColumnAndRowUsage","polygonsUsed","columnsUsed","j","shapeToCoordinates","column","row","HEXAGON_POINTED_TOP","CIRCLE","SQUARE","generatePoints","points","Infinity","isNaN","generateUniformPoints","xpos","ypos","y","getRadius","generateRadius","with2Decimals","Number","getOffsets","getOffsetsHexagonPointedTop","getOffsetsSquare","getOffsetsUniform","shapeWidth","shapeHeight","offsetToViewY","getOddEvenCountForRange","actualHeightUsed","yoffset","offsetToViewX","widthOffset","actualWidthUsed","xoffset","getDiameters","L","oddCount","evenCount","showName","item","getMouseXY","viewPortWidth","documentElement","clientWidth","window","innerWidth","pageX","pageY","templateSrv","svgContainer","d3DivId","opt","minFont","maxFont","lm","columns","rows","radiusAutoSize","polystat","calculatedPoints","computeTextFontSize","linesToDisplay","textAreaWidth","textAreaHeight","minFontPx","maxFontPx","w","fontSize","getTextSizeForWidthAndHeight","draw","margin","ahexbin","dx","dy","x0","y0","x1","y1","hexbin","binsById","bins","px","point","py","pj","pi","py1","abs","px1","pi2","pj2","px2","py2","id","bin","hexagon","angle","sin","cos","centers","mesh","fragment","_","extent","tooltip","append","attr","style","tooltipEnabled","svg","defs","colorGradients","aGradient","okColorStart","okColorEnd","okGradient","warningColorStart","warningColorEnd","warningGradient","criticalColorStart","criticalColorEnd","criticalGradient","unknownGradient","customShape","innerArea","symbol","type","activeLabelFontSize","activeValueFontSize","isShowEllipses","numOfChars","fontAutoScale","maxLabel","maxValue","valueFormatted","submetricCount","members","counter","copiedData","checkContent","formatValueContent","valueEnabled","valueWithLabelTextAlignment","valueOnlyTextAlignment","labelWithValueTextAlignment","labelOnlyTextAlignment","labelTextAlignmentX","labelValueAlignmentX","activeShape","selectAll","enter","each","nodes","clickThroughTarget","node","clickThroughURL","clickThrough","sanitizeURLEnabled","sanitizedURL","resolveClickThroughURL","newTabEnabled","fillColor","gradientEnabled","circleRadius","squareRadius","polygonBorderColor","polygonBorderSize","on","transition","duration","html","tooltipContent","tooltipFontSize","tooltipFontType","textspot","miscbin","alignment","showValue","fontType","fontColor","ellipseEnabled","ellipseCharacters","compositeFrames","fill","initialItemIndex","dataLen","content","select","valueTextLocation","compositeIndex","animationSpeed","frames","animateMode","thresholdLevel","prefix","suffix","len","triggeredIndex","triggerCache","buildTriggerCache","z","index","aMember","err","cachedMemberState","orderBy","flatten","target","opts","delimiter","maxDepth","currentDepth","output","step","prev","keys","forEach","isarray","safe","isArray","isobject","newKey","operatorName","aSeries","displayMode","alias","operatorValue","getValueByOperator","stats","datapoints","timestamp","seriesRaw","isComposite","avg","count","current","diff","first","logmin","min","metricName","timeStep","total","shallowClone","clone","PolystatModel","deepClone","TimeSeriesToPolystat","series","GetColumnsJSONData","names","maxDocs","flattened","propName","getWorstSeries","series1","series2","worstSeries","series1ThresholdLevel","series2ThresholdLevel","getThresholdLevelForValue","thresholds","defaultColor","currentColor","currentState","thresholdCount","aThreshold","state","upperThreshold","lowerThreshold","getValueByStatName","tranformSingleMetric","url","cellName","cellValue","encodeURIComponent","cellRawValue","tranformNthMetric","nthCellName","matched","nthName","nthCellValue","nthValue","nthCellRawValue","tranformComposite","compositeName","$scope","$sanitize","metricOverrides","onSetThresholds","customSplitDelimiter","activeOverrideIndex","suggestMetricNames","ctrl","label","addMetricOverride","override","MetricOverride","colors","enabled","unitFormat","removeMetricOverride","without","panel","savedOverrides","refresh","metricNameChanged","toggleHide","matchOverride","pattern","resolvedOverrides","resolveOverrideTemplates","anOverride","regex","matches","ret","variableRegex","matchResult","template","ScopedVars","customFormatter","seriesName","newName","applyOverrides","config","dataValue","globalThresholds","polygonGlobalFillColor","mappings","mappedValue","formatFunc","valueFormats","valueRounded","roundValue","ClickThroughTransformer","setUnitFormat","subItem","savedComposites","subTabIndex","metricComposites","addMetricComposite","aComposite","MetricComposite","displayName","hideMembers","removeMetricComposite","addMetricToComposite","composite","undefined","removeMetricFromComposite","metric","resolveCompositeTemplates","isTemplated","templatedName","resolveMemberTemplates","vars","member","includes","escapedName","newSeriesNameEscaped","seriesNameEscaped","resolveMemberAliasTemplates","templateVars","groups","applyComposites","filteredMetrics","clonedComposites","resolvedComposites","matchedMetrics","currentWorstSeries","templatedMembers","aMetric","exec","seriesItem","k","itemIndex","sort","splice","generate","scope","items","time","dashboard","formatDate","timestampContent","valueHeadingContent","valueContent","tooltipDisplayMode","Tooltip","getTriggeredCount","tooltipTimestampEnabled","tooltipDisplayTextTriggeredEmpty","compositeContent","sortedMembers","tooltipPrimarySortField","tooltipSecondarySortField","tooltipPrimarySortDirection","tooltipSecondarySortDirection","aRow","triggered","getSeriesList","options","list","dataList","range","timeField","fields","field","number","fieldValues","values","timeValues","toTimeSeries","xaxis","stack","aliasEscaped","concat","dataFrameIndex","fieldIndex","colorIndex","aliasColors","theme","unit","last","from","valueOf","isOutsideRange","frameHasTimestamp","frame","flattenLabels","rowNum","labelIndexes","numFields","string","indexes","labelAndValue","indexValue","aField","getValueOfField","getLabelValues","newFieldWithLabels","labels","newField","cloneDeep","toArray","$injector","animationModes","displayModes","shapes","fontSizes","unitFormats","getUnitFormats","operatorOptions","sortDirections","sortFields","sortOptions","panelDefaults","nullPointMode","valueMaps","op","mappingTypes","rangeMaps","to","mappingType","defaultClickThrough","defaultClickThroughNewTab","defaultClickThroughSanitize","fontAutoColor","globalUnitFormat","globalDecimals","globalDisplayMode","globalOperatorName","globalDisplayTextTriggeredEmpty","hexagonSortByDirection","hexagonSortByField","maxMetrics","defaultsDeep","useDataFrames","processor","containerDivId","initialized","panelContainer","panelWidth","panelHeight","polystatData","d3Object","migrateSortDirections","overridesCtrl","compositesManager","events","dataFramesReceived","onDataFramesReceived","dataError","onDataError","dataSnapshotLoad","onSnapshotLoad","editModeInitialized","onInitEditMode","__","constructor","thisPanelPath","optionsPath","addEditorTab","overridesPath","compositesPath","mappingsPath","setContainer","container","getPanelWidthFailsafe","trueWidth","gridPos","pixelsPerSlot","span","editModeInitiated","offsetParent","pixelsPerSpan","getPanelHeight","tmpPanelHeight","String","panelTitleOffset","title","containerHeight","clearSVG","remove","renderD3","top","right","bottom","left","getDefaultClickThrough","NaN","removeValueMap","render","addValueMap","removeRangeMap","rangeMap","addRangeMap","onThresholdsChanged","link","elem","attrs","panelByClass","find","childNodes","renderingCompleted","setValues","dataRaw","transform","converted","applyGlobalFormatting","filterByGlobalDisplayMode","sortOrder","sortType","reverseSort","sortField","sortBy","toLower","reverse","SortVariableValuesByField","sortByField","compositeMetrics","results","dataFrames","dataFrame","getProcessedDataFrames","seriesToPolystat","tableToPolystat","onDataReceived","allData","tableConverted","seriesConverted","timeToInsert","Date","now","newData","newFrame","hasTimestamp","rowsOfField","copiedField","newFieldValues","add","InsertTime","ts","flotpairs","getFlotPairs","dataWarning","reduce","sum","tip","seriesHandler","seriesData","invertColorOrder","tmp","validateAnimationSpeed","speed","newSpeed","checkSpeed","validateDisplayLimit","limit","newLimit","checkLimit","validateColumnValue","newColumns","checkColumns","validateRowValue","newRows","checkRows","validateRadiusValue","newRadius","checkRadius","validateFontColorValue","validateBorderSizeValue","borderSize","newBorderSize","checkBorderSize","updatePolygonBorderColor","updatePolygonGlobalFillColor","setGlobalUnitFormat","templateUrl","thresholdStates","sortThresholds","doRefresh","callback","addThreshold","setThresholdColor","threshold","updateThresholdColor","removeThreshold","directive","controller","controllerAs","restrict","dark","light"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","var thirdPi = Math.PI / 3,\n    angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];\n\nfunction pointX(d) {\n  return d[0];\n}\n\nfunction pointY(d) {\n  return d[1];\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      x = pointX,\n      y = pointY,\n      r,\n      dx,\n      dy;\n\n  function hexbin(points) {\n    var binsById = {}, bins = [], i, n = points.length;\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(px = +x.call(null, point = points[i], i, points))\n          || isNaN(py = +y.call(null, point, i, points))) continue;\n\n      var point,\n          px,\n          py,\n          pj = Math.round(py = py / dy),\n          pi = Math.round(px = px / dx - (pj & 1) / 2),\n          py1 = py - pj;\n\n      if (Math.abs(py1) * 3 > 1) {\n        var px1 = px - pi,\n            pi2 = pi + (px < pi ? -1 : 1) / 2,\n            pj2 = pj + (py < pj ? -1 : 1),\n            px2 = px - pi2,\n            py2 = py - pj2;\n        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n      }\n\n      var id = pi + \"-\" + pj, bin = binsById[id];\n      if (bin) bin.push(point);\n      else {\n        bins.push(bin = binsById[id] = [point]);\n        bin.x = (pi + (pj & 1) / 2) * dx;\n        bin.y = pj * dy;\n      }\n    }\n\n    return bins;\n  }\n\n  function hexagon(radius) {\n    var x0 = 0, y0 = 0;\n    return angles.map(function(angle) {\n      var x1 = Math.sin(angle) * radius,\n          y1 = -Math.cos(angle) * radius,\n          dx = x1 - x0,\n          dy = y1 - y0;\n      x0 = x1, y0 = y1;\n      return [dx, dy];\n    });\n  }\n\n  hexbin.hexagon = function(radius) {\n    return \"m\" + hexagon(radius == null ? r : +radius).join(\"l\") + \"z\";\n  };\n\n  hexbin.centers = function() {\n    var centers = [],\n        j = Math.round(y0 / dy),\n        i = Math.round(x0 / dx);\n    for (var y = j * dy; y < y1 + r; y += dy, ++j) {\n      for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {\n        centers.push([x, y]);\n      }\n    }\n    return centers;\n  };\n\n  hexbin.mesh = function() {\n    var fragment = hexagon(r).slice(0, 4).join(\"l\");\n    return hexbin.centers().map(function(p) { return \"M\" + p + \"m\" + fragment; }).join(\"\");\n  };\n\n  hexbin.x = function(_) {\n    return arguments.length ? (x = _, hexbin) : x;\n  };\n\n  hexbin.y = function(_) {\n    return arguments.length ? (y = _, hexbin) : y;\n  };\n\n  hexbin.radius = function(_) {\n    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;\n  };\n\n  hexbin.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];\n  };\n\n  hexbin.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];\n  };\n\n  return hexbin.radius(1);\n}\n","import _ from 'lodash';\n\nfunction GetDecimalsForValue(value: any, panelDecimals: any): { decimals; scaledDecimals } {\n  if (_.isNumber(panelDecimals)) {\n    return { decimals: panelDecimals, scaledDecimals: null };\n  }\n\n  const delta = value / 2;\n  let dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n  const magn = Math.pow(10, -dec);\n  const norm = delta / magn; // norm is between 1.0 and 10.0\n  let size;\n\n  if (norm < 1.5) {\n    size = 1;\n  } else if (norm < 3) {\n    size = 2;\n    // special case for 2.5, requires an extra decimal\n    if (norm > 2.25) {\n      size = 2.5;\n      ++dec;\n    }\n  } else if (norm < 7.5) {\n    size = 5;\n  } else {\n    size = 10;\n  }\n\n  size *= magn;\n\n  // reduce starting decimals if not needed\n  if (Math.floor(value) === value) {\n    dec = 0;\n  }\n\n  const result = {\n    decimals: 0,\n    scaledDecimals: 0,\n  };\n  result.decimals = Math.max(0, dec);\n  result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n  return result;\n}\n\n/**\n * Find the largest font size (in pixels) that allows the string to fit in the given width.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold ?px verdana\")\n *                      -- note the use of ? in place of the font size.\n * @param {width} the width in pixels the string must fit in\n * @param {minFontPx} the smallest acceptable font size in pixels\n * @param {maxFontPx} the largest acceptable font size in pixels\n */\nfunction getTextSizeForWidth(text: string, font: any, width, minFontPx, maxFontPx) {\n  let s = font.replace('?', maxFontPx);\n  let w = getTextWidth(text, s);\n  if (w <= width) {\n    return maxFontPx;\n  }\n  // pad width by 10px\n  width = width - 20;\n  // start from large to small, return 0 for no-fit\n  for (let fontSize = maxFontPx; fontSize >= minFontPx; fontSize--) {\n    s = font.replace('?', fontSize);\n    w = getTextWidth(text, s);\n    if (w < width) {\n      return Math.ceil(fontSize);\n    }\n  }\n  // 0 if no fit\n  return 0;\n}\n\n/**\n * Find the largest font size (in pixels) that allows the string to fit in the given width.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold ?px verdana\")\n *                      -- note the use of ? in place of the font size.\n * @param {width} the width in pixels the string must fit in\n * @param {height} the height in pixels\n * @param {minFontPx} the smallest acceptable font size in pixels\n * @param {maxFontPx} the largest acceptable font size in pixels\n */\nfunction getTextSizeForWidthAndHeight(\n  text: string,\n  font: any,\n  width: number,\n  height: number,\n  minFontPx: number,\n  maxFontPx: number\n) {\n  let s = font.replace('?', maxFontPx);\n  let w = getTextWidth(text, s);\n  // need to pad the width: use 80% of the space (leave 10% padding on each side)\n  width = width * 0.95;\n  if (w <= width && maxFontPx <= height) {\n    return maxFontPx;\n  }\n  // start from large to small, return 0 for no-fit\n  for (let fontSize = maxFontPx; fontSize >= minFontPx; fontSize--) {\n    s = font.replace('?', fontSize);\n    w = getTextWidth(text, s);\n    // has to fit within the width of the text area, and not exceed the height\n    if (w < width && fontSize <= height) {\n      return Math.ceil(fontSize);\n    }\n  }\n  // 0 if no fit\n  return 0;\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nfunction getTextWidth(text: string, font: string) {\n  // re-use canvas object for better performance\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n}\n\nfunction RGBToHex(text: string) {\n  // check if in rgb notation\n  if (!text.startsWith('rgb')) {\n    return text;\n  }\n  let hex = '#FFFFFF';\n  try {\n    const a = text.split('(')[1].split(')')[0];\n    const b = a.split(',');\n    const c = b.map((x) => {\n      // For each array element\n      x = parseInt(x, 10).toString(16); // Convert to a base16 string\n      return x.length === 1 ? '0' + x : x; // Add zero if we get only one character\n    });\n    hex = '#' + c.join('');\n  } catch (e) {\n    return hex;\n  }\n  return hex;\n}\n\nfunction SortVariableValuesByField(options, field: any, sortOrder: number) {\n  if (sortOrder === 0) {\n    return options;\n  }\n\n  const sortType = Math.ceil(sortOrder / 2);\n  const reverseSort = sortOrder % 2 === 0;\n\n  if (sortType === 1) {\n    const sortField = options[field];\n    options = _.sortBy(options, sortField);\n  } else if (sortType === 2) {\n    options = _.sortBy(options, (opt) => {\n      const matchField = opt[field];\n      const matches = matchField.match(/.*?(\\d+).*/);\n      if (!matches || matches.length < 2) {\n        return -1;\n      } else {\n        return parseInt(matches[1], 10);\n      }\n    });\n  } else if (sortType === 3) {\n    options = _.sortBy(options, (opt) => {\n      return _.toLower(opt[field]);\n    });\n  }\n\n  if (reverseSort) {\n    options = options.reverse();\n  }\n\n  return options;\n}\n\nexport {\n  GetDecimalsForValue,\n  getTextSizeForWidth,\n  getTextSizeForWidthAndHeight,\n  getTextWidth,\n  RGBToHex,\n  SortVariableValuesByField,\n};\n","/*\n Generic class to provide gradient colors\n\n Based on https://codepen.io/anon/pen/wWxGkr\n\n*/\nexport class Color {\n  r: number;\n  g: number;\n  b: number;\n\n  constructor(r: number, g: number, b: number) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  asHex() {\n    return '#' + ((1 << 24) + (this.r << 16) + (this.g << 8) + this.b).toString(16).slice(1);\n  }\n\n  asRGB() {\n    return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';\n  }\n\n  blendWith(col, a) {\n    const r = Math.round(col.r * (1 - a) + this.r * a);\n    const g = Math.round(col.g * (1 - a) + this.g * a);\n    const b = Math.round(col.b * (1 - a) + this.b * a);\n    return new Color(r, g, b);\n  }\n\n  Mul(col, a) {\n    const r = Math.round((col.r / 255) * this.r * a);\n    const g = Math.round((col.g / 255) * this.g * a);\n    const b = Math.round((col.b / 255) * this.b * a);\n    return new Color(r, g, b);\n  }\n\n  RGBToHex(rgb) {\n    let sep = rgb.indexOf(',') > -1 ? ',' : ' ';\n    rgb = rgb.substr(4).split(')')[0].split(sep);\n    // Convert %s to 0–255\n    for (let R in rgb) {\n      let r = rgb[R];\n      if (r.indexOf('%') > -1) {\n        rgb[R] = Math.round((r.substr(0, r.length - 1) / 100) * 255);\n      }\n    }\n  }\n\n  static RGBAToHex(orig: string) {\n    const rgb = orig.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i);\n    const alpha = ((rgb && rgb[4]) || '').trim();\n    let hex = rgb\n      ? (parseInt(rgb[1], 10) | (1 << 8)).toString(16).slice(1) +\n        (parseInt(rgb[2], 10) | (1 << 8)).toString(16).slice(1) +\n        (parseInt(rgb[3], 10) | (1 << 8)).toString(16).slice(1)\n      : orig;\n\n    var a;\n    if (alpha !== '') {\n      const alphaVal = parseFloat(alpha);\n      // multiply before convert to HEX\n      a = ((alphaVal * 255) | (1 << 8)).toString(16).slice(1);\n    } else {\n      a = 1;\n    }\n    return '#' + hex + a;\n  }\n\n  fromHex(hex) {\n    // http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n    hex = hex.substring(1, 7);\n    const bigint = parseInt(hex, 16);\n    this.r = (bigint >> 16) & 255;\n    this.g = (bigint >> 8) & 255;\n    this.b = bigint & 255;\n  }\n\n  static createGradients(data: any): any {\n    const gradients = [];\n    const purelight = new Color(255, 255, 255);\n    for (let i = 0; i < data.length; i++) {\n      const aColorStart = new Color(0, 0, 0);\n      // color can be in hex or in rgb\n      let useColor: string = data[i].color;\n      if (useColor.startsWith('rgba')) {\n        useColor = this.RGBAToHex(useColor);\n      }\n      aColorStart.fromHex(useColor);\n      const aColorEnd = aColorStart.Mul(purelight, 0.7);\n      gradients.push({ start: aColorStart.asHex(), end: aColorEnd.asHex() });\n    }\n    return gradients;\n  }\n}\n","export interface PolystatThreshold {\n  color: string;\n  state: number;\n  value: number;\n}\n\nexport class MetricOverride {\n  label: string;\n  metricName: string;\n  thresholds: PolystatThreshold[];\n  colors: string[];\n  unitFormat: string;\n  decimals: string;\n  scaledDecimals: number;\n  enabled: boolean;\n  operatorName: string; // avg/min/max etc\n  prefix: string;\n  suffix: string;\n  clickThrough: string;\n  newTabEnabled: boolean;\n  sanitizeURLEnabled: boolean;\n  sanitizedURL: string;\n}\n\nexport interface PolystatConfigs {\n  animationSpeed: number;\n  columns: any;\n  columnAutoSize: boolean;\n  displayLimit: number;\n  defaultClickThrough: '';\n  defaultClickThroughNewTab: boolean;\n  defaultClickThroughSanitize: boolean;\n  fontAutoScale: boolean;\n  fontSize: number;\n  fontType: string;\n  globalUnitFormat: string;\n  globalDecimals: number;\n  globalDisplayMode: string;\n  globalOperatorName: string;\n  globalDisplayTextTriggeredEmpty: string;\n  globalThresholds?: PolystatThreshold[];\n  gradientEnabled: boolean;\n  hexagonSortByDirection: string;\n  hexagonSortByField: string;\n  maxMetrics: number;\n  polygonBorderSize: number;\n  polygonBorderColor: string;\n  polygonGlobalFillColor: string;\n  radius: any;\n  radiusAutoSize: boolean;\n  rows: any;\n  rowAutoSize: boolean;\n  shape: string;\n  tooltipDisplayMode: string;\n  tooltipDisplayTextTriggeredEmpty: string;\n  tooltipFontSize: number;\n  tooltipFontType: string;\n  tooltipPrimarySortDirection: string;\n  tooltipPrimarySortField: string;\n  tooltipSecondarySortDirection: string;\n  tooltipSecondarySortField: string;\n  tooltipTimestampEnabled: boolean;\n  tooltipEnabled: boolean;\n  valueEnabled: boolean;\n}\n\nexport enum PolygonShapes {\n  HEXAGON_POINTED_TOP = 'hexagon_pointed_top',\n  CIRCLE = 'circle',\n  SQUARE = 'square',\n}\n\nexport interface PolystatDiameters {\n  diameterX: number;\n  diameterY: number;\n}\n","import * as d3 from 'd3';\nimport { PolygonShapes, PolystatDiameters } from './types';\n/**\n * LayoutManager creates layouts for supported polygon shapes\n */\nexport class LayoutManager {\n  width: number;\n  height: number;\n  numColumns: number;\n  numRows: number;\n  radius: number;\n  autoSize: boolean;\n  maxRowsUsed: number;\n  maxColumnsUsed: number;\n  displayLimit: number;\n  shape: PolygonShapes;\n  readonly SQRT3 = 1.7320508075688772;\n\n  constructor(\n    width: number,\n    height: number,\n    numColumns: number,\n    numRows: number,\n    displayLimit: number,\n    autoSize: boolean,\n    shape: PolygonShapes\n  ) {\n    this.width = width;\n    this.height = height;\n    this.numColumns = numColumns;\n    this.numRows = numRows;\n    this.maxColumnsUsed = 0;\n    this.maxRowsUsed = 0;\n    this.displayLimit = displayLimit;\n    this.shape = shape;\n    this.radius = 0;\n    this.autoSize = autoSize;\n  }\n\n  /**\n   * Sets the radius to be used in all layout calculations\n   *\n   * @param radius user defined value\n   */\n  setRadius(radius: number) {\n    this.radius = radius;\n  }\n  setHeight(height: number) {\n    this.height = height;\n  }\n  setWidth(width: number) {\n    this.width = width;\n  }\n  /**\n   * returns a layout for hexagons with pointed tops\n   */\n  generateHexagonPointedTopLayout(): any {\n    const layout = {};\n    this.radius = this.getHexFlatTopRadius();\n    return layout;\n  }\n\n  /**\n   * returns a layout for square-shapes\n   */\n  generateUniformLayout(): any {\n    const layout = {};\n    this.radius = this.getUniformRadius();\n    return layout;\n  }\n\n  /**\n   * The maximum radius the hexagons can have to still fit the screen\n   * With (long) radius being R:\n   *  - Total width (rows > 1) = 1 small radius (sqrt(3) * R / 2) + columns * small diameter (sqrt(3) * R)\n   *  - Total height = 1 pointy top (1/2 * R) + rows * size of the rest (3/2 * R)\n   */\n  getHexFlatTopRadius(): number {\n    const polygonBorderSize = 0; // TODO: borderRadius should be configurable and part of the config\n    let hexRadius = d3.min([\n      this.width / ((this.numColumns + 0.5) * this.SQRT3),\n      this.height / ((this.numRows + 1 / 3) * 1.5),\n    ]);\n    hexRadius = hexRadius - polygonBorderSize;\n    return this.truncateFloat(hexRadius);\n  }\n\n  /**\n   * Helper method to return rendered width and height of hexagon shape\n   */\n  getHexFlatTopDiameters(): PolystatDiameters {\n    const hexRadius = this.getHexFlatTopRadius();\n    const diameterX = this.truncateFloat(hexRadius * this.SQRT3);\n    const diameterY = this.truncateFloat(hexRadius * 2);\n    return { diameterX, diameterY };\n  }\n\n  /**\n   * Helper method to return rendered width and height of a circle/square shapes\n   */\n  getUniformDiameters(): PolystatDiameters {\n    const radius = this.getUniformRadius();\n    const diameterX = radius * 2;\n    const diameterY = radius * 2;\n    return { diameterX, diameterY };\n  }\n  /**\n   * Given the number of columns and rows, calculate the maximum size of a uniform shaped polygon that can be used\n   *   uniformed shapes are: square/circle\n   * width divided by the number of columns determines the max horizontal of the square\n   * height divided by the number of rows determines the max vertical size ofthe square\n   * the smaller of the two is used since that is the \"best fit\" for a square\n   */\n  getUniformRadius(): number {\n    const polygonBorderSize = 0; // TODO: borderRadius should be configurable and part of the config\n    // width divided by the number of columns determines the max horizontal of the square\n    // height divided by the number of rows determines the max vertical size ofthe square\n    // the smaller of the two is used since that is the \"best fit\"\n    const horizontalMax = (this.width / this.maxColumnsUsed) * 0.5;\n    const verticalMax = (this.height / this.maxRowsUsed) * 0.5;\n    let uniformRadius = horizontalMax;\n    if (uniformRadius > verticalMax) {\n      // vertically limited\n      uniformRadius = verticalMax;\n    }\n    // internal border\n    uniformRadius = uniformRadius - polygonBorderSize;\n    return this.truncateFloat(uniformRadius);\n  }\n\n  generatePossibleColumnAndRowsSizes(columnAutoSize: boolean, rowAutoSize: boolean, dataSize: number) {\n    if (rowAutoSize && columnAutoSize) {\n      // sqrt of # data items\n      const squared = Math.sqrt(dataSize);\n      // favor columns when width is greater than height\n      // favor rows when width is less than height\n      if (this.width > this.height) {\n        this.numColumns = Math.ceil((this.width / this.height) * squared);\n        // always at least 1 column and max. data.length columns\n        if (this.numColumns < 1) {\n          this.numColumns = 1;\n        } else if (this.numColumns > dataSize) {\n          this.numColumns = dataSize;\n        }\n\n        // Align rows count to computed columns count\n        this.numRows = Math.ceil(dataSize / this.numColumns);\n        // always at least 1 row\n        if (this.numRows < 1) {\n          this.numRows = 1;\n        }\n      } else {\n        this.numRows = Math.ceil((this.height / this.width) * squared);\n        // always at least 1 row and max. data.length rows\n        if (this.numRows < 1) {\n          this.numRows = 1;\n        } else if (this.numRows > dataSize) {\n          this.numRows = dataSize;\n        }\n        // Align colunns count to computed rows count\n        this.numColumns = Math.ceil(dataSize / this.numRows);\n        // always at least 1 column\n        if (this.numColumns < 1) {\n          this.numColumns = 1;\n        }\n      }\n    } else if (rowAutoSize) {\n      // Align rows count to fixed columns count\n      this.numRows = Math.ceil(dataSize / this.numColumns);\n      // always at least 1 row\n      if (this.numRows < 1) {\n        this.numRows = 1;\n      }\n    } else if (columnAutoSize) {\n      // Align colunns count to fixed rows count\n      this.numColumns = Math.ceil(dataSize / this.numRows);\n      // always at least 1 column\n      if (this.numColumns < 1) {\n        this.numColumns = 1;\n      }\n    }\n  }\n\n  /**\n   * This determines how many rows and columns are going to be rendered, which can then\n   * be used to calculate the radius size (which is needed before generating points)\n   * @param data metrics\n   * @param displayLimit max number of polygons to show\n   */\n  generateActualColumnAndRowUsage(data: any, displayLimit: number) {\n    let polygonsUsed = 0;\n    let maxRowsUsed = 0;\n    let columnsUsed = 0;\n    let maxColumnsUsed = 0;\n    for (let i = 0; i < this.numRows; i++) {\n      if ((!displayLimit || polygonsUsed < displayLimit) && polygonsUsed < data.length) {\n        maxRowsUsed += 1;\n        columnsUsed = 0;\n        for (let j = 0; j < this.numColumns; j++) {\n          if ((!displayLimit || polygonsUsed < displayLimit) && polygonsUsed < data.length) {\n            columnsUsed += 1;\n            // track the most number of columns\n            if (columnsUsed > maxColumnsUsed) {\n              maxColumnsUsed = columnsUsed;\n            }\n            polygonsUsed++;\n          }\n        }\n      }\n    }\n    this.maxRowsUsed = maxRowsUsed;\n    this.maxColumnsUsed = maxColumnsUsed;\n  }\n\n  shapeToCoordinates(shape: PolygonShapes, radius: number, column: number, row: number) {\n    switch (shape) {\n      case PolygonShapes.HEXAGON_POINTED_TOP:\n        let x = radius * column * this.SQRT3;\n        //Offset each uneven row by half of a \"hex-width\" to the right\n        if (row % 2 === 1) {\n          x += (radius * this.SQRT3) / 2;\n        }\n        const y = radius * row * 1.5;\n        return [x, y];\n        break;\n      case PolygonShapes.CIRCLE:\n        return [radius * column * 2, radius * row * 2];\n        break;\n      case PolygonShapes.SQUARE:\n        return [radius * column * 2, radius * row * 2];\n        break;\n      default:\n        return [radius * column * 1.75, radius * row * 1.5];\n        break;\n    }\n  }\n\n  // Builds the placeholder polygons needed to represent each metric\n  generatePoints(data: any, displayLimit: number, shape: PolygonShapes): any {\n    const points = [];\n    if (typeof data === 'undefined') {\n      return points;\n    }\n    let maxRowsUsed = 0;\n    let columnsUsed = 0;\n    let maxColumnsUsed = 0;\n    // when duplicating panels, this gets odd\n    if (this.numRows === Infinity) {\n      return points;\n    }\n    if (isNaN(this.numColumns)) {\n      return points;\n    }\n    for (let i = 0; i < this.numRows; i++) {\n      if ((!displayLimit || points.length < displayLimit) && points.length < data.length) {\n        maxRowsUsed += 1;\n        columnsUsed = 0;\n        for (let j = 0; j < this.numColumns; j++) {\n          if ((!displayLimit || points.length < displayLimit) && points.length < data.length) {\n            columnsUsed += 1;\n            // track the most number of columns\n            if (columnsUsed > maxColumnsUsed) {\n              maxColumnsUsed = columnsUsed;\n            }\n            points.push(this.shapeToCoordinates(shape, this.radius, j, i));\n          }\n        }\n      }\n    }\n    this.maxRowsUsed = maxRowsUsed;\n    this.maxColumnsUsed = maxColumnsUsed;\n    return points;\n  }\n\n  generateUniformPoints(data: any, displayLimit: number): any {\n    const points = [];\n    if (typeof data === 'undefined') {\n      return points;\n    }\n    let maxRowsUsed = 0;\n    let columnsUsed = 0;\n    let maxColumnsUsed = 0;\n    let xpos = 1;\n    let ypos = 1;\n\n    // when duplicating panels, this gets odd\n    if (this.numRows === Infinity) {\n      return points;\n    }\n    if (isNaN(this.numColumns)) {\n      return points;\n    }\n    for (let i = 0; i < this.numRows; i++) {\n      if ((!displayLimit || points.length < displayLimit) && points.length < data.length) {\n        maxRowsUsed += 1;\n        columnsUsed = 0;\n        for (let j = 0; j < this.numColumns; j++) {\n          if ((!displayLimit || points.length < displayLimit) && points.length < data.length) {\n            columnsUsed += 1;\n            // track the most number of columns\n            if (columnsUsed > maxColumnsUsed) {\n              maxColumnsUsed = columnsUsed;\n            }\n            points.push({\n              x: xpos,\n              y: ypos,\n              width: this.radius * 2,\n              height: this.radius * 2,\n            });\n            xpos += this.radius * 2;\n          }\n        }\n        xpos = 1;\n        ypos += this.radius * 2;\n      }\n    }\n    this.maxRowsUsed = maxRowsUsed;\n    this.maxColumnsUsed = maxColumnsUsed;\n    return points;\n  }\n\n  getRadius(): number {\n    return this.radius;\n  }\n\n  generateRadius(shape: PolygonShapes): number {\n    if (!this.autoSize) {\n      return this.radius;\n    }\n    let radius = 0;\n    switch (shape) {\n      case PolygonShapes.HEXAGON_POINTED_TOP:\n        radius = this.getHexFlatTopRadius();\n        break;\n      case PolygonShapes.CIRCLE:\n        radius = this.getUniformRadius();\n        break;\n      case PolygonShapes.SQUARE:\n        radius = this.getUniformRadius();\n        break;\n      default:\n        radius = this.getHexFlatTopRadius();\n        break;\n    }\n    this.radius = radius;\n    return radius;\n  }\n\n  truncateFloat(value: number): number {\n    if (value === Infinity || isNaN(value)) {\n      return 0;\n    }\n    const with2Decimals = value.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0];\n    return Number(with2Decimals);\n  }\n\n  getOffsets(shape: PolygonShapes, dataSize: number): any {\n    switch (shape) {\n      case PolygonShapes.HEXAGON_POINTED_TOP:\n        return this.getOffsetsHexagonPointedTop(dataSize);\n      case PolygonShapes.SQUARE:\n        return this.getOffsetsSquare(dataSize);\n      case PolygonShapes.CIRCLE:\n        return this.getOffsetsUniform(dataSize);\n      default:\n        return this.getOffsetsUniform(dataSize);\n    }\n  }\n\n  getOffsetsHexagonPointedTop(dataSize: number): any {\n    let hexRadius = d3.min([\n      this.width / ((this.numColumns + 0.5) * this.SQRT3),\n      this.height / ((this.numRows + 1 / 3) * 1.5),\n    ]);\n    hexRadius = this.truncateFloat(hexRadius);\n    const shapeWidth = this.truncateFloat(hexRadius * this.SQRT3);\n    const shapeHeight = this.truncateFloat(hexRadius * 2);\n\n    const offsetToViewY = shapeHeight * 0.5;\n    // even rows are half-sized\n    const { oddCount, evenCount } = this.getOddEvenCountForRange(1, this.maxRowsUsed);\n    // odd-numbered hexagons are full height, evens are half height\n    const actualHeightUsed = oddCount * shapeHeight + evenCount * shapeHeight * 0.5;\n    let yoffset = (this.height - actualHeightUsed) / 2;\n    yoffset = -(yoffset + offsetToViewY);\n\n    const offsetToViewX = shapeWidth * 0.5;\n    // columns have a half-width offset if there are more than 1 rows\n    let widthOffset = 0;\n    if (this.numRows > 1) {\n      // if the datasize is equal to or larger than the 2*Columns, there is an additional offset needed\n      if (dataSize >= this.maxColumnsUsed * 2) {\n        widthOffset = 0.5;\n      }\n    }\n    const actualWidthUsed = (this.numColumns + widthOffset) * shapeWidth;\n    let xoffset = (this.width - actualWidthUsed) / 2;\n    xoffset = -(xoffset + offsetToViewX);\n    return { xoffset, yoffset };\n  }\n\n  getOffsetsUniform(dataSize: number): any {\n    const { diameterX, diameterY } = this.getDiameters();\n    const shapeWidth = this.truncateFloat(diameterX);\n    const shapeHeight = this.truncateFloat(diameterY);\n    const offsetToViewY = shapeHeight * 0.5;\n    const actualHeightUsed = this.maxRowsUsed * shapeHeight;\n    let yoffset = (this.height - actualHeightUsed) / 2;\n    yoffset = -(yoffset + offsetToViewY);\n    const offsetToViewX = shapeWidth * 0.5;\n    const actualWidthUsed = this.numColumns * shapeWidth;\n    let xoffset = (this.width - actualWidthUsed) / 2;\n    xoffset = -(xoffset + offsetToViewX);\n    return { xoffset, yoffset };\n  }\n\n  getOffsetsSquare(dataSize: number): any {\n    const { diameterX, diameterY } = this.getDiameters();\n    const shapeWidth = this.truncateFloat(diameterX);\n    const shapeHeight = this.truncateFloat(diameterY);\n    const offsetToViewY = 0; // shapeHeight * 0.5;\n    const actualHeightUsed = this.maxRowsUsed * shapeHeight;\n    let yoffset = (this.height - actualHeightUsed) / 2;\n    yoffset = -(yoffset + offsetToViewY);\n    const offsetToViewX = 0; //shapeWidth * 0.5;\n    const actualWidthUsed = this.numColumns * shapeWidth;\n    let xoffset = (this.width - actualWidthUsed) / 2;\n    xoffset = -(xoffset + offsetToViewX);\n    return { xoffset, yoffset };\n  }\n\n  getOddEvenCountForRange(L: number, R: number): any {\n    let oddCount = (R - L) / 2;\n    // if either R or L is odd\n    if (R % 2 !== 0 || L % 2 !== 0) {\n      oddCount++;\n    }\n    const evenCount = R - L + 1 - oddCount;\n    return { oddCount, evenCount };\n  }\n\n  /**\n   * Returns diameterX and diameterY for given shape\n   */\n  getDiameters(): PolystatDiameters {\n    switch (this.shape) {\n      case PolygonShapes.HEXAGON_POINTED_TOP:\n        return this.getHexFlatTopDiameters();\n      case PolygonShapes.SQUARE:\n        return this.getUniformDiameters();\n      case PolygonShapes.CIRCLE:\n        return this.getUniformDiameters();\n      default:\n        return this.getUniformDiameters();\n    }\n  }\n}\n","import * as d3 from 'd3';\nimport * as d3hexbin from 'd3-hexbin';\nimport { getTextSizeForWidthAndHeight } from './utils';\nimport _ from 'lodash';\nimport { Color } from './color';\nimport { LayoutManager } from './layoutManager';\nimport { PolygonShapes } from 'types';\n\nfunction resolveClickThroughURL(d: any): string {\n  let clickThroughURL = d.clickThrough;\n  if (d.sanitizeURLEnabled === true && d.sanitizedURL.length > 0) {\n    clickThroughURL = d.sanitizedURL;\n  }\n  return clickThroughURL;\n}\n\nfunction resolveClickThroughTarget(d: any): string {\n  let clickThroughTarget = '_self';\n  if (d.newTabEnabled === true) {\n    clickThroughTarget = '_blank';\n  }\n  return clickThroughTarget;\n}\n\nfunction showName(item: any): boolean {\n  // check if property exist and check its value\n  return !('showName' in item) || item.showName;\n}\n\nfunction showValue(item: any): boolean {\n  // check if property exist and check its value\n  return !('showValue' in item) || item.showValue;\n}\n\nfunction getMouseXY(): any {\n  // use the viewportwidth to prevent the tooltip from going too far right\n  const viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n  // use the mouse position for the entire page, received by\n  // d3.event.pageX, d3.event.pageY\n  //\n  // the type doesn't exist, but the object does, ignore the error\n  // @ts-ignore\n  let xpos = d3.event.pageX - 50;\n  // don't allow offscreen tooltip\n  if (xpos < 0) {\n    xpos = 0;\n  }\n  // prevent tooltip from rendering outside of viewport\n  if (xpos + 200 > viewPortWidth) {\n    xpos = viewPortWidth - 200;\n  }\n  // the type doesn't exist, but the object does, ignore the error\n  // @ts-ignore\n  const ypos = d3.event.pageY + 5;\n\n  return { xpos, ypos };\n}\n\nexport class D3Wrapper {\n  svgContainer: any;\n  d3DivId: any;\n  opt: any;\n  data: any;\n  templateSrv: any;\n  calculatedPoints: any;\n  calculatedTextPoints: any;\n  minFont = 6;\n  maxFont = 240;\n  purelight: any;\n\n  // layout\n  lm: LayoutManager;\n  constructor(templateSrv: any, svgContainer: any, d3DivId: any, opt: any) {\n    this.templateSrv = templateSrv;\n    this.svgContainer = svgContainer;\n    this.d3DivId = d3DivId;\n    this.data = opt.data;\n    this.opt = opt;\n\n    this.purelight = new Color(255, 255, 255);\n    // take 10 off the height\n    //this.opt.height -= 10;\n    //this.opt.width -= 20;\n    this.data = this.opt.data;\n    this.lm = new LayoutManager(\n      this.opt.width,\n      this.opt.height,\n      opt.columns || 6,\n      opt.rows || 6,\n      this.opt.displayLimit,\n      this.opt.radiusAutoSize,\n      this.opt.polystat.shape\n    );\n\n    // determine how many rows and columns are going to be generated\n    this.lm.generatePossibleColumnAndRowsSizes(this.opt.columnAutoSize, this.opt.rowAutoSize, this.data.length);\n    // to determine the radius, the actual number of rows and columns that will be used needs to be calculated\n    this.lm.generateActualColumnAndRowUsage(this.data, opt.displayLimit);\n    // next the radius can be determined from actual rows and columns being used\n    if (!opt.radiusAutoSize && opt.radius) {\n      this.lm.setRadius(opt.radius);\n    } else {\n      this.lm.generateRadius(this.opt.polystat.shape);\n    }\n    // using the known number of columns and rows that can be used in addition to the radius,\n    // generate the points to be filled\n    this.calculatedPoints = this.lm.generatePoints(this.data, opt.displayLimit, this.opt.polystat.shape);\n  }\n\n  computeTextFontSize(text: string, linesToDisplay: number, textAreaWidth: number, textAreaHeight: number): number {\n    return getTextSizeForWidthAndHeight(\n      text,\n      '?px sans-serif', // use sans-serif for sizing\n      textAreaWidth,\n      textAreaHeight / linesToDisplay, // multiple lines of text\n      this.minFont,\n      this.maxFont\n    );\n  }\n\n  //update(data: any) {\n  //  if (data) {\n  //    this.data = data;\n  //  }\n  // }\n\n  draw() {\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n\n    const width = this.opt.width;\n    const height = this.opt.height;\n\n    const ahexbin = d3hexbin\n      .hexbin()\n      .radius(this.lm.generateRadius(this.opt.polystat.shape))\n      .extent([\n        [0, 0],\n        [width, height],\n      ]);\n    const { diameterX, diameterY } = this.lm.getDiameters();\n    const { xoffset, yoffset } = this.lm.getOffsets(this.opt.polystat.shape, this.data.length);\n\n    // Define the div for the tooltip\n    // add it to the body and not the container so it can float outside of the panel\n    const tooltip = d3\n      .select('body')\n      .append('div')\n      .attr('id', this.d3DivId + '-tooltip')\n      .attr('class', 'polystat-panel-tooltip')\n      .style('opacity', 0);\n    if (this.opt.polystat.tooltipEnabled === false) {\n      tooltip.style('display', 'none');\n    }\n\n    const svg: any = d3\n      .select(this.svgContainer)\n      .attr('width', width + 'px')\n      .attr('height', height + 'px')\n      .append('svg')\n      .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink')\n      .attr('width', '100%')\n      .attr('height', '100%')\n      .attr('viewBox', xoffset + ',' + yoffset + ', ' + width + ', ' + height)\n      .style('border', '0px solid white') // TODO: make this light/dark friendly\n      .attr('id', this.d3DivId)\n      .append('g')\n      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    const data = this.data;\n    const defs = svg.append('defs');\n\n    const colorGradients = Color.createGradients(data);\n    for (let i = 0; i < colorGradients.length; i++) {\n      const aGradient = defs.append('linearGradient').attr('id', this.d3DivId + 'linear-gradient-state-data-' + i);\n      aGradient.attr('x1', '30%').attr('y1', '30%').attr('x2', '70%').attr('y2', '70%');\n      aGradient.append('stop').attr('offset', '0%').attr('stop-color', colorGradients[i].start);\n      aGradient.append('stop').attr('offset', '100%').attr('stop-color', colorGradients[i].end);\n    }\n    const okColorStart = new Color(82, 194, 52); // #52c234\n    const okColorEnd = okColorStart.Mul(this.purelight, 0.7);\n    const okGradient = defs.append('linearGradient').attr('id', this.d3DivId + 'linear-gradient-state-ok');\n    okGradient.attr('x1', '30%').attr('y1', '30%').attr('x2', '70%').attr('y2', '70%');\n    okGradient.append('stop').attr('offset', '0%').attr('stop-color', okColorStart.asHex());\n    okGradient.append('stop').attr('offset', '100%').attr('stop-color', okColorEnd.asHex());\n\n    // https://uigradients.com/#JuicyOrange\n    const warningColorStart = new Color(255, 200, 55); // #FFC837\n    const warningColorEnd = warningColorStart.Mul(this.purelight, 0.7);\n    const warningGradient = defs.append('linearGradient').attr('id', this.d3DivId + 'linear-gradient-state-warning');\n    warningGradient.attr('x1', '30%').attr('y1', '30%').attr('x2', '70%').attr('y2', '70%');\n    warningGradient.append('stop').attr('offset', '0%').attr('stop-color', warningColorStart.asHex()); // light orange\n    warningGradient.append('stop').attr('offset', '100%').attr('stop-color', warningColorEnd.asHex()); // dark orange\n\n    // https://uigradients.com/#YouTube\n    const criticalColorStart = new Color(229, 45, 39); // e52d27\n    const criticalColorEnd = criticalColorStart.Mul(this.purelight, 0.7);\n    const criticalGradient = defs.append('linearGradient').attr('id', this.d3DivId + 'linear-gradient-state-critical');\n    criticalGradient.attr('x1', '30%').attr('y1', '30%').attr('x2', '70%').attr('y2', '70%');\n    criticalGradient.append('stop').attr('offset', '0%').attr('stop-color', criticalColorStart.asHex()); // light red\n    criticalGradient.append('stop').attr('offset', '100%').attr('stop-color', criticalColorEnd.asHex()); // dark red\n\n    // https://uigradients.com/#Ash\n    const unknownGradient = defs.append('linearGradient').attr('id', this.d3DivId + 'linear-gradient-state-unknown');\n    unknownGradient.attr('x1', '30%').attr('y1', '30%').attr('x2', '70%').attr('y2', '70%');\n    unknownGradient.append('stop').attr('offset', '0%').attr('stop-color', '#73808A'); // light grey\n    unknownGradient.append('stop').attr('offset', '100%').attr('stop-color', '#757F9A'); // dark grey\n\n    let customShape = null;\n    // compute text area size (used to calculate the fontsize)\n    const textAreaWidth = diameterX;\n    const textAreaHeight = diameterY / 2; // Top and bottom of hexagon are not used\n    // symbols use the area for their size\n    let innerArea = diameterX * diameterY;\n    // use the smaller of diameterX or Y\n    if (diameterX < diameterY) {\n      innerArea = diameterX * diameterX;\n    }\n    if (diameterY < diameterX) {\n      innerArea = diameterY * diameterY;\n    }\n    // square and circle do not use this\n    const symbol = d3.symbol().size(innerArea);\n    switch (this.opt.polystat.shape) {\n      case PolygonShapes.HEXAGON_POINTED_TOP:\n        customShape = ahexbin.hexagon(this.lm.getRadius());\n        break;\n      case PolygonShapes.CIRCLE:\n        customShape = symbol.type(d3.symbolCircle);\n        break;\n      case PolygonShapes.SQUARE:\n        customShape = symbol.type(d3.symbolSquare);\n        break;\n      default:\n        customShape = ahexbin.hexagon(this.lm.getRadius());\n        break;\n    }\n\n    // calculate the fontsize based on the shape and the text\n    let activeLabelFontSize = this.opt.polystat.fontSize;\n    // font sizes are independent for label and values\n    let activeValueFontSize = this.opt.polystat.fontSize;\n    //for showing ellipses for name on polygon\n    let isShowEllipses = false;\n    //number of characters to show on polygon\n    let numOfChars = 0;\n\n    // compute font size if autoscale is activated\n    if (this.opt.polystat.fontAutoScale) {\n      // find the most text that will be displayed over all items\n      let maxLabel = '';\n      for (let i = 0; i < this.data.length; i++) {\n        if (this.data[i].name.length > maxLabel.length) {\n          maxLabel = this.data[i].name;\n        }\n      }\n      // same for the value, also check for submetrics size in case of composite\n      let maxValue = '';\n      for (let i = 0; i < this.data.length; i++) {\n        if (this.data[i].valueFormatted.length > maxValue.length) {\n          maxValue = this.data[i].valueFormatted;\n        }\n        const submetricCount = this.data[i].members.length;\n        if (submetricCount > 0) {\n          let counter = 0;\n          while (counter < submetricCount) {\n            const copiedData = Object.assign({}, this.data[i]);\n            const checkContent = this.formatValueContent(counter, copiedData);\n            if (checkContent && checkContent.length > maxValue.length) {\n              maxValue = checkContent;\n            }\n            counter++;\n          }\n        }\n      }\n      // estimate how big of a font can be used\n      // Two lines of text must fit with vertical spacing included\n      // if it is too small, hide everything\n      activeLabelFontSize = this.computeTextFontSize(maxLabel, 2, textAreaWidth, textAreaHeight);\n      activeValueFontSize = this.computeTextFontSize(maxValue, 2, textAreaWidth, textAreaHeight);\n      if (activeLabelFontSize < this.minFont) {\n        isShowEllipses = true;\n        numOfChars = 18;\n        maxLabel = maxLabel.substring(0, numOfChars + 2);\n        activeLabelFontSize = this.computeTextFontSize(maxLabel, 2, textAreaWidth, textAreaHeight);\n        if (activeLabelFontSize < this.minFont) {\n          numOfChars = 10;\n          maxLabel = maxLabel.substring(0, numOfChars + 2);\n          activeLabelFontSize = this.computeTextFontSize(maxLabel, 2, textAreaWidth, textAreaHeight);\n          if (activeLabelFontSize < this.minFont) {\n            numOfChars = 6;\n            maxLabel = maxLabel.substring(0, numOfChars + 2);\n            activeLabelFontSize = this.computeTextFontSize(maxLabel, 2, textAreaWidth, textAreaHeight);\n          }\n        }\n      }\n\n      // value should never be larger than the label\n      if (activeValueFontSize > activeLabelFontSize) {\n        activeValueFontSize = activeLabelFontSize;\n      }\n      if (!this.opt.polystat.valueEnabled) {\n        activeValueFontSize = 0;\n      }\n    }\n\n    // compute alignment for each text element, base coordinate is at the center of the polygon (text is anchored at its bottom):\n    // - Value text (bottom text) will be aligned (positively i.e. lower) in the middle of the bottom half of the text area\n    // - Label text (top text) will be aligned (negatively, i.e. higher) in the middle of the top half of the text area\n    let valueWithLabelTextAlignment = textAreaHeight / 2 / 2 + activeValueFontSize / 2;\n    let valueOnlyTextAlignment = activeValueFontSize / 2;\n    let labelWithValueTextAlignment = -(textAreaHeight / 2 / 2) + activeLabelFontSize / 2;\n    let labelOnlyTextAlignment = activeLabelFontSize / 2;\n\n    let labelTextAlignmentX = 0;\n    let labelValueAlignmentX = 0;\n\n    let filledSVG = null;\n    let activeShape = this.opt.polystat.shape;\n\n    // Create placeholders for each polygon\n    // hexagons need to use hexbin for layout, the square/circle shapes require rect/circle instead\n    filledSVG = svg\n      .selectAll(`.${activeShape}`)\n      .data(activeShape === PolygonShapes.HEXAGON_POINTED_TOP ? ahexbin(this.calculatedPoints) : this.calculatedPoints)\n      .enter();\n\n    // Create polygons\n    filledSVG.each((_, i, nodes) => {\n      let node = d3.select(nodes[i]);\n\n      // Make it clickable if clickThroughURL is specified\n      const clickThroughURL = resolveClickThroughURL(data[i]);\n      if (clickThroughURL.length > 0) {\n        node = node.append('a').attr('target', resolveClickThroughTarget(data[i])).attr('xlink:href', clickThroughURL);\n      }\n\n      let fillColor = data[i].color;\n      if (this.opt.polystat.gradientEnabled) {\n        // safari needs the location.href\n        fillColor = `url(\"#${this.d3DivId}linear-gradient-state-data-${i}\")`;\n      }\n\n      switch (activeShape) {\n        case PolygonShapes.HEXAGON_POINTED_TOP:\n          node = node\n            .append('path')\n            .attr('transform', (d: any) => {\n              return 'translate(' + d.x + ',' + d.y + ')';\n            })\n            .attr('d', customShape);\n          break;\n        case PolygonShapes.CIRCLE:\n          const circleRadius = this.lm.generateRadius(activeShape);\n          node = node\n            .append('circle')\n            .attr('class', 'circle')\n            .attr('cx', (d: any) => {\n              return d[0];\n            })\n            .attr('cy', (d: any) => {\n              return d[1];\n            })\n            .attr('r', circleRadius);\n          break;\n        case PolygonShapes.SQUARE:\n          const squareRadius = this.lm.generateRadius(activeShape);\n          node = node\n            .append('rect')\n            .attr('class', 'rect')\n            .attr('x', (d: any) => {\n              return d[0];\n            })\n            .attr('y', (d: any) => {\n              return d[1];\n            })\n            .attr('height', squareRadius * 2)\n            .attr('width', squareRadius * 2);\n          break;\n      }\n      node = node\n        // Set colors\n        .attr('stroke', this.opt.polystat.polygonBorderColor)\n        .attr('stroke-width', this.opt.polystat.polygonBorderSize + 'px')\n        .style('fill', fillColor)\n        // Tooltips\n        .on('mousemove', () => {\n          let { xpos, ypos } = getMouseXY();\n          tooltip.style('left', xpos + 'px').style('top', ypos + 'px');\n        })\n        .on('mouseover', (d: any) => {\n          let { xpos, ypos } = getMouseXY();\n          tooltip.transition().duration(200).style('opacity', 0.9);\n          tooltip\n            .html(this.opt.tooltipContent[i])\n            .style('font-size', this.opt.tooltipFontSize)\n            .style('font-family', this.opt.tooltipFontType)\n            .style('left', xpos + 'px')\n            .style('top', ypos + 'px');\n        })\n        .on('mouseout', () => {\n          tooltip.transition().duration(500).style('opacity', 0);\n        });\n    });\n\n    // now labels\n    let textspot = null;\n    switch (this.opt.polystat.shape) {\n      case PolygonShapes.HEXAGON_POINTED_TOP:\n        textspot = svg.selectAll('text.toplabel').data(ahexbin(this.calculatedPoints));\n        // offset when only showing label\n        labelOnlyTextAlignment = activeLabelFontSize * 0.37;\n        break;\n      case PolygonShapes.CIRCLE:\n        textspot = svg.selectAll('text.toplabel').data(this.miscbin(this.calculatedPoints));\n        // offset when only showing label\n        labelOnlyTextAlignment = activeLabelFontSize * 0.37;\n        break;\n      case PolygonShapes.SQUARE:\n        textspot = svg.selectAll('text.toplabel').data(this.miscbin(this.calculatedPoints));\n        // square is \"centered\" at top left, not the center\n\n        // compute alignment for each text element, base coordinate is at the top left corner (text is anchored at its bottom):\n        // - Value text (bottom text) will be aligned (positively i.e. lower) in the middle of the bottom half of the text area\n        // - Label text (top text) will be aligned in the middle of the top half of the text area\n        valueWithLabelTextAlignment = diameterY / 1.5 + activeValueFontSize / 2;\n        valueOnlyTextAlignment = diameterY / 2 + activeLabelFontSize * 0.37;\n        labelWithValueTextAlignment = diameterY / 4 + activeLabelFontSize / 2;\n        // alignment is equal to the half of height plus a fraction of the fontSize\n        labelOnlyTextAlignment = diameterY / 2 + activeLabelFontSize * 0.37;\n        //\n        labelTextAlignmentX = diameterX / 2;\n        labelValueAlignmentX = diameterX / 2;\n        break;\n    }\n\n    textspot\n      .enter()\n      .append('text')\n      .attr('class', 'toplabel')\n      .attr('x', (d: any) => {\n        return d.x + labelTextAlignmentX;\n      })\n      .attr('y', (d, i) => {\n        const item = data[i];\n        let alignment = labelOnlyTextAlignment;\n        if (showValue(item)) {\n          alignment = labelWithValueTextAlignment;\n        }\n        return d.y + alignment;\n      })\n      .attr('text-anchor', 'middle')\n      .attr('font-family', this.opt.polystat.fontType)\n      .attr('font-size', activeLabelFontSize + 'px')\n      .attr('fill', this.opt.polystat.fontColor)\n      .style('pointer-events', 'none')\n      .text((_, i) => {\n        const item = data[i];\n        if (showName(item)) {\n          if (isShowEllipses) {\n            const name = item.name.substring(0, numOfChars) + '...';\n            return name;\n          }\n          if (\n            !this.opt.polystat.fontAutoScale &&\n            this.opt.polystat.ellipseEnabled &&\n            item.name.length > this.opt.polystat.ellipseCharacters\n          ) {\n            const name = item.name.substring(0, this.opt.polystat.ellipseCharacters) + '...';\n            return name;\n          }\n          return item.name;\n        }\n        return '';\n      });\n\n    // each composite tracks its own frames\n    let compositeFrames = new Array(data.length).fill(0);\n\n    textspot\n      .enter()\n      .append('text')\n      .attr('class', (_, i) => {\n        return 'valueLabel' + i;\n      })\n      .attr('x', (d) => {\n        return d.x + labelValueAlignmentX;\n      })\n      .attr('y', (d, i) => {\n        const item = data[i];\n        let alignment = valueOnlyTextAlignment;\n        if (showName(item)) {\n          alignment = valueWithLabelTextAlignment;\n        }\n        return d.y + alignment;\n      })\n      .attr('text-anchor', 'middle')\n      .attr('font-family', this.opt.polystat.fontType)\n      .attr('fill', this.opt.polystat.fontColor)\n      .attr('font-size', activeValueFontSize + 'px')\n      .style('pointer-events', 'none')\n      .text((_, i) => {\n        // animation/displaymode can modify what is being displayed\n        let initialItemIndex = 0;\n        const dataLen = this.data.length;\n        let content = null;\n        // get the first non-hidden item, this will be displayed first (before the interval starts)\n        while (content === null && initialItemIndex < dataLen) {\n          const copiedData = Object.assign({}, this.data[i]);\n          content = this.formatValueContent(compositeFrames[i] + initialItemIndex, copiedData);\n          if (content !== null) {\n            break;\n          }\n          initialItemIndex++;\n        }\n        const valueTextLocation = svg.select('text.valueLabel' + i);\n        // use the dynamic size for the value\n        valueTextLocation.attr('font-size', activeValueFontSize + 'px');\n        // pass the index of the first item being displayed, the counter can start from there\n        d3.interval((initialItemIndex) => {\n          // there is a leak in here, data is being held by frames\n          const valueTextLocation = svg.select('text.valueLabel' + i);\n          const compositeIndex = i;\n          valueTextLocation.text(() => {\n            // animation/displaymode can modify what is being displayed\n            valueTextLocation.attr('font-size', activeValueFontSize + 'px');\n\n            let content = null;\n            let counter = 0;\n            // TODO: fix this loop\n            const dataLen = this.data.length * 2;\n            // search for a value cycling through twice to allow rollover\n            while (content === null && counter < dataLen) {\n              const copiedData = Object.assign({}, this.data[compositeIndex]);\n              content = this.formatValueContent(compositeFrames[compositeIndex] + counter, copiedData);\n              counter++;\n            }\n            if (content === null) {\n              return '';\n            }\n            if (content === '') {\n              // TODO: add custom content for composite ok state\n              content = '';\n              // set the font size to be the same as the label above\n              //valueTextLocation.attr(\"font-size\", dynamicValueFontSize + \"px\");\n            }\n            return content;\n          });\n          compositeFrames[i]++;\n        }, this.opt.animationSpeed);\n        //frames++;\n        return content;\n      });\n  }\n\n  /**\n   * Expands coordinates from the array to explicit x and y similar to hexbin but without any offsets\n   *\n   * @param data calculate coordinates in array pairs of x,y\n   */\n  miscbin(data: any): any {\n    for (let i = 0; i < data.length; i++) {\n      data[i].x = data[i][0];\n      data[i].y = data[i][1];\n    }\n    return data;\n  }\n  formatValueContent(frames, data): string {\n    //const data = thisRef.data[index];\n    // options can specify to not show the value\n    if (typeof data !== 'undefined') {\n      if (data.hasOwnProperty('showValue')) {\n        if (!data.showValue) {\n          return '';\n        }\n      }\n      if (!data.hasOwnProperty('valueFormatted')) {\n        return '';\n      }\n    } else {\n      // no data, return nothing\n      return '';\n    }\n    switch (data.animateMode) {\n      case 'all':\n        break;\n      case 'triggered':\n        // return nothing if mode is triggered and the state is 0\n        if (data.thresholdLevel < 1) {\n          return '';\n        }\n    }\n    let content = data.valueFormatted;\n    // if there's no valueFormatted, there's nothing to display\n    if (!content) {\n      return null;\n    }\n    if (data.prefix && data.prefix.length > 0) {\n      content = data.prefix + ' ' + content;\n    }\n    if (data.suffix && data.suffix.length > 0) {\n      content = content + ' ' + data.suffix;\n    }\n    // a composite will contain the \"worst\" case as the valueFormatted,\n    // and will have all of the members of the composite included.\n    // as frames increment find a triggered member starting from the frame mod len\n    const len = data.members.length;\n    if (len > 0) {\n      let triggeredIndex = -1;\n      if (data.animateMode === 'all') {\n        triggeredIndex = frames % len;\n      } else {\n        if (typeof data.triggerCache === 'undefined') {\n          data.triggerCache = this.buildTriggerCache(data);\n        }\n        const z = frames % data.triggerCache.length;\n        triggeredIndex = data.triggerCache[z].index;\n      }\n      const aMember = Object.assign({}, data.members[triggeredIndex]);\n\n      // TODO: future ellipses for alias before value\n      /*\n      let useName = aMember.name;\n      if ((!this.opt.polystat.fontAutoScale) && (this.opt.polystat.ellipseEnabled) && (useName.length > this.opt.polystat.ellipseCharacters)) {\n        useName = useName.substring(0, this.opt.polystat.ellipseCharacters-5) + '...';\n      }\n      */\n      content = aMember.name + ': ' + aMember.valueFormatted;\n      if (aMember.prefix && aMember.prefix.length > 0) {\n        content = aMember.prefix + ' ' + content;\n      }\n      if (aMember.suffix && aMember.suffix.length > 0) {\n        content = content + ' ' + aMember.suffix;\n      }\n    }\n    // allow templating\n    //\n    if (content && content.length > 0) {\n      try {\n        const replacedContent = this.templateSrv.replace(content, 'text');\n        content = replacedContent;\n      } catch (err) {\n        console.log('ERROR: template server threw error: ' + err);\n      }\n    }\n    return content;\n  }\n\n  buildTriggerCache(item) {\n    let triggerCache = [];\n    for (let i = 0; i < item.members.length; i++) {\n      const aMember = item.members[i];\n      if (aMember.thresholdLevel > 0) {\n        // add to list\n        const cachedMemberState = {\n          index: i,\n          name: aMember.name,\n          value: aMember.value,\n          thresholdLevel: aMember.thresholdLevel,\n        };\n        triggerCache.push(cachedMemberState);\n      }\n    }\n    // sort it\n    triggerCache = _.orderBy(triggerCache, ['thresholdLevel', 'value', 'name'], ['desc', 'desc', 'asc']);\n    return triggerCache;\n  }\n}\n","// Copyright (c) 2014, Hugh Kennedy\n// Based on code from https://github.com/hughsk/flat/blob/master/index.js\n//\n\nexport function flatten(target, opts): any {\n  opts = opts || {};\n\n  const delimiter = opts.delimiter || '.';\n  let maxDepth = opts.maxDepth || 3;\n  let currentDepth = 1;\n  const output = {};\n\n  function step(object, prev) {\n    Object.keys(object).forEach((key) => {\n      const value = object[key];\n      const isarray = opts.safe && Array.isArray(value);\n      const type = Object.prototype.toString.call(value);\n      const isobject = type === '[object Object]';\n\n      const newKey = prev ? prev + delimiter + key : key;\n\n      if (!opts.maxDepth) {\n        maxDepth = currentDepth + 1;\n      }\n\n      if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {\n        ++currentDepth;\n        return step(value, newKey);\n      }\n\n      output[newKey] = value;\n    });\n  }\n\n  step(target, null);\n\n  return output;\n}\n","/**\n * Holds data for polystat\n *\n * This clas represents the contents of one polygon\n */\n\nexport class PolystatModel {\n  animateMode: string;\n  displayMode: string;\n  thresholdLevel: number; // 0 = ok, 1 = warn, 2 = crit, 3 = unknown (same as sensu)\n  value: number;\n  valueFormatted: string;\n  valueRounded: number;\n  stats: any;\n  name: string;\n  displayName: string; // Used for composites\n  timestamp: number;\n  prefix: string;\n  suffix: string;\n  seriesRaw: [any];\n  color: string;\n  clickThrough: string;\n  operatorName: string;\n  newTabEnabled: boolean;\n  sanitizedURL: string;\n  sanitizeURLEnabled: boolean;\n  showName: boolean;\n  showValue: boolean;\n  isComposite: boolean;\n  members: PolystatModel[];\n\n  constructor(operatorName: string, aSeries: any) {\n    if (aSeries === null) {\n      return;\n    }\n    this.animateMode = 'all';\n    this.displayMode = 'all';\n    this.operatorName = operatorName;\n    this.name = aSeries.alias;\n    const operatorValue = this.getValueByOperator(operatorName, aSeries);\n    this.value = operatorValue;\n    this.valueFormatted = operatorValue;\n    this.stats = aSeries.stats;\n    if (aSeries.datapoints.length > 0) {\n      this.timestamp = aSeries.datapoints[aSeries.datapoints.length - 1][1];\n    }\n    this.prefix = '';\n    this.suffix = '';\n    this.seriesRaw = null;\n    this.color = 'green';\n    this.clickThrough = '';\n    this.sanitizedURL = '';\n    this.newTabEnabled = true;\n    this.sanitizeURLEnabled = true;\n    this.isComposite = false;\n    this.members = [];\n    this.thresholdLevel = 0;\n    this.showName = true;\n    this.showValue = true;\n  }\n\n  getValueByOperator(operatorName, data) {\n    let value = data.stats.avg;\n    switch (operatorName) {\n      case 'avg':\n        value = data.stats.avg;\n        break;\n      case 'count':\n        value = data.stats.count;\n        break;\n      case 'current':\n        value = data.stats.current;\n        break;\n      case 'delta':\n        value = data.stats.delta;\n        break;\n      case 'diff':\n        value = data.stats.diff;\n        break;\n      case 'first':\n        value = data.stats.first;\n        break;\n      case 'logmin':\n        value = data.stats.logmin;\n        break;\n      case 'max':\n        value = data.stats.max;\n        break;\n      case 'min':\n        value = data.stats.min;\n        break;\n      case 'name':\n        value = data.metricName;\n        break;\n      case 'time_step':\n        value = data.stats.timeStep;\n        break;\n      case 'last_time':\n        value = data.timestamp;\n        break;\n      case 'total':\n        value = data.stats.total;\n        break;\n      default:\n        value = data.stats.avg;\n        break;\n    }\n    return value;\n  }\n\n  /**\n   * Copies values, leaves members empty\n   */\n  shallowClone(): PolystatModel {\n    const clone = new PolystatModel(this.operatorName, null);\n    clone.operatorName = this.operatorName;\n    clone.thresholdLevel = this.thresholdLevel;\n    clone.value = this.value;\n    clone.valueFormatted = this.valueFormatted;\n    clone.name = this.name;\n    clone.timestamp = this.timestamp;\n    clone.prefix = this.prefix;\n    clone.suffix = this.suffix;\n    clone.seriesRaw = null; // for a shallow clone drop the series\n    clone.color = this.color;\n    clone.clickThrough = this.clickThrough;\n    clone.newTabEnabled = this.newTabEnabled;\n    clone.sanitizedURL = this.sanitizedURL;\n    clone.sanitizeURLEnabled = this.sanitizeURLEnabled;\n    clone.isComposite = this.isComposite;\n    clone.members = []; // this.members;\n    return clone;\n  }\n  deepClone(): PolystatModel {\n    const clone = new PolystatModel(this.operatorName, null);\n    clone.operatorName = this.operatorName;\n    clone.thresholdLevel = this.thresholdLevel;\n    clone.value = this.value;\n    clone.valueFormatted = this.valueFormatted;\n    clone.name = this.name;\n    clone.timestamp = this.timestamp;\n    clone.prefix = this.prefix;\n    clone.suffix = this.suffix;\n    clone.seriesRaw = this.seriesRaw; // deep clone retains the series (careful of leak!)\n    clone.color = this.color;\n    clone.clickThrough = this.clickThrough;\n    clone.sanitizedURL = this.sanitizedURL;\n    clone.newTabEnabled = this.newTabEnabled;\n    clone.sanitizeURLEnabled = this.sanitizeURLEnabled;\n    clone.isComposite = this.isComposite;\n    clone.members = []; // this.members;\n    return clone;\n  }\n}\n","/*\n Metric transforms\n\n Avg/Min/Max etc\n TimeSeries to Hexbin\n Table to Hexbin\n ? to Hexbin\n */\n\n/*\n Hexbin requires two series in this form:\n  array[][x,y]\n*/\n\nimport { flatten } from './flatten';\nimport _ from 'lodash';\nimport { PolystatModel } from './polystatmodel';\n\nexport class Transformers {\n  static TimeSeriesToPolystat(operatorName: string, series: any): any {\n    // only use min length, and start from the \"end\"\n    // use timestamp of X\n    //let tsLength = series.datapoints.length;\n    //let bins = [];\n    const aPolystat = new PolystatModel(operatorName, series);\n    //for (let index = tsLength - 1; index >= 0; index--) {\n    //for (let index = 0; index < tsLength; index++) {\n    // get the number of metrics\n    //  let aPolystat = new PolystatModel(series);\n    //  bins.push(aPolystat);\n    //}\n    return aPolystat;\n  }\n\n  /*\n  static TimeSeriesToHexbin(xTimeSeries : any, yTimeSeries : any) : PolystatModel {\n    //console.log(\"Converting time series to hexbin\");\n    // only use min length, and start from the \"end\"\n    // use timestamp of X\n    let tsLength = xTimeSeries.datapoints.length;\n    let tsYLength = yTimeSeries.datapoints.length;\n    if (tsYLength < tsLength) {\n      tsLength = tsYLength;\n    }\n    let bins = new PolystatModel(\"avg\", xTimeSeries);\n    //console.log(\"Number of time series in X: \" + tsLength);\n    //for (let index = tsLength - 1; index >= 0; index--) {\n    for (let index = 0; index < tsLength; index++) {\n      let x = xTimeSeries.datapoints[index][0];\n      //let xTime = xTimeSeries.datapoints[index][1];\n      let y = yTimeSeries.datapoints[index][0];\n      //let yTime = yTimeSeries.datapoints[index][1];\n      //console.log(\"y is \" + y + \" time: \" + yTime);\n      //console.log(\"x is \" + x + \" time: \" + xTime);\n      bins.push(x, y);\n    }\n    return bins;\n  }\n  */\n\n  /*\n  static TableDataToHexbin(tableData : any, xColumn : number, yColumn : number) : PolystatModel {\n    let bins = new PolystatModel([]);\n    console.log(tableData[0].type);\n    if (tableData[0].type === \"table\") {\n      console.log(\"it is a table\");\n      let tsLength = tableData[0].rows.length;\n      for (let index = 0; index < tsLength; index++) {\n        let timeStamp = tableData[0].rows[index][0];\n        let xColumnValue = tableData[0].rows[index][xColumn];\n        let yColumnValue = tableData[0].rows[index][yColumn];\n        console.log(\"getting time column \" + timeStamp);\n        console.log(\"getting x column \" + xColumnValue);\n        console.log(\"getting x column \" + yColumnValue);\n        bins.push(xColumnValue, yColumnValue);\n      }\n    }\n    return bins;\n  }\n*/\n  static GetColumnsJSONData(data): any {\n    if (!data || data.length === 0) {\n      return [];\n    }\n    const names: any = {};\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      const maxDocs = Math.min(series.datapoints.length, 100);\n      for (let y = 0; y < maxDocs; y++) {\n        const doc = series.datapoints[y];\n        const flattened = flatten(doc, null);\n        for (const propName in flattened) {\n          if (flattened.hasOwnProperty(propName)) {\n            names[propName] = true;\n          }\n        }\n      }\n    }\n\n    // TODO: this was value: key in original code\n    return _.map(names, (value, key) => {\n      return { text: key, value: value };\n    });\n  }\n}\n","import { PolystatThreshold } from 'types';\nimport { PolystatModel } from './polystatmodel';\n\n/*\n\nThis supports ranged states\n\nThresholds are expected to be sorted by ascending value, where\n  T0 = lowest decimal value, any state\n  TN = highest decimal value, any state\n\nInitial state is set to \"ok\"\n\nA comparison is made using \"greater than or equal to\" against the value\n  If value >= thresholdValue state = X\n\nComparisons are made in reverse order, using the range between the Nth (inclusive) threshold and N+1 (exclusive)\n  InclusiveValue = T(n).value\n  ExclusiveValue = T(n+1).value\n\nWhen there is no n+1 threshold, the highest value threshold T(n), a simple inclusive >= comparison is made\n\n  Example 1: (typical linear)\n    T0 - 5, ok\n    T1 - 10, warning\n    T2 - 20, critical\n\n  Value >= 20 (Value >= T2)\n  10 <= Value < 20  (T1 <= Value < T2)\n  5 <= Value < 10   (T0 <= Value < T1)\n\n  Example 2: (reverse linear)\n    T0 - 50, critical\n    T1 - 90, warning\n    T2 - 100, ok\n\n  Value >= 100\n  90 <= value < 100\n  50 <= value < 90\n\n  Example 3: (bounded)\n    T0 - 50, critical\n    T1 - 60, warning\n    T2 - 70, ok\n    T3 - 80, warning\n    T4 - 90, critical\n\n    Value >= 90\n    80 <= Value < 90\n    70 <= Value < 80\n    60 <= Value < 70\n    50 <= Value < 60\n\nThe \"worst\" state is returned after checking every threshold range\n\n*/\nfunction getWorstSeries(series1: PolystatModel, series2: PolystatModel): any {\n  let worstSeries = series1;\n  const series1ThresholdLevel = series1.thresholdLevel;\n  const series2ThresholdLevel = series2.thresholdLevel;\n\n  // State 3 is Unknown and is not be worse than CRITICAL (state 2)\n  if (series2ThresholdLevel > series1ThresholdLevel) {\n    // series2 has higher threshold violation\n    worstSeries = series2;\n  }\n  if (series1ThresholdLevel === 3) {\n    // series1 is in state unknown, check if series2 is in state 1 or 2\n    switch (series2ThresholdLevel) {\n      case 1:\n        worstSeries = series2;\n        break;\n      case 2:\n        worstSeries = series2;\n        break;\n    }\n  }\n  return worstSeries;\n}\n\nfunction getThresholdLevelForValue(\n  thresholds: PolystatThreshold[],\n  value: number,\n  defaultColor: string\n): { thresholdLevel: number; color: string } {\n  const colorGrey = '#808080'; // \"grey\"\n  let currentColor = defaultColor;\n  if (value === null) {\n    return { thresholdLevel: 3, color: colorGrey }; // No Data\n  }\n  // assume UNKNOWN state\n  let currentState = -1;\n  // skip evaluation when there are no thresholds\n  if (typeof thresholds === 'undefined') {\n    return { thresholdLevel: currentState, color: defaultColor };\n  }\n  // test \"Nth\" threshold\n  const thresholdCount = thresholds.length;\n  if (thresholdCount === 0) {\n    return { thresholdLevel: currentState, color: defaultColor };\n  }\n  const aThreshold = thresholds[thresholdCount - 1];\n  if (value >= aThreshold.value) {\n    currentState = aThreshold.state;\n    currentColor = aThreshold.color;\n  }\n  // if there's one threshold, just return the result\n  if (thresholds.length === 1) {\n    return { thresholdLevel: currentState, color: currentColor };\n  }\n  // now test in reverse\n  for (let i = thresholdCount - 1; i > 0; i--) {\n    const upperThreshold = thresholds[i];\n    const lowerThreshold = thresholds[i - 1];\n    if (lowerThreshold.value <= value && value < upperThreshold.value) {\n      if (currentState < lowerThreshold.state) {\n        currentState = lowerThreshold.state;\n        currentColor = lowerThreshold.color;\n      }\n    }\n  }\n  // last check, if currentState is not set, and there is a lower threshold, use that value (inclusive range up to T1)\n  if (currentState === -1) {\n    currentState = thresholds[0].state;\n    currentColor = thresholds[0].color;\n  }\n  return { thresholdLevel: currentState, color: currentColor };\n}\n\nfunction getValueByStatName(operatorName: string, data: any): number {\n  let value = data.stats.avg;\n  switch (operatorName) {\n    case 'avg':\n      value = data.stats.avg;\n      break;\n    case 'count':\n      value = data.stats.count;\n      break;\n    case 'current':\n      value = data.stats.current;\n      break;\n    case 'delta':\n      value = data.stats.delta;\n      break;\n    case 'diff':\n      value = data.stats.diff;\n      break;\n    case 'first':\n      value = data.stats.first;\n      break;\n    case 'logmin':\n      value = data.stats.logmin;\n      break;\n    case 'max':\n      value = data.stats.max;\n      break;\n    case 'min':\n      value = data.stats.min;\n      break;\n    case 'name':\n      value = data.metricName;\n      break;\n    case 'time_step':\n      value = data.stats.timeStep;\n      break;\n    case 'last_time':\n      value = data.timestamp;\n      break;\n    case 'total':\n      value = data.stats.total;\n      break;\n    default:\n      value = data.stats.avg;\n      break;\n  }\n  return value;\n}\n\nexport { getWorstSeries, getThresholdLevelForValue, getValueByStatName };\n","/**\n * Convert model data to url params\n */\nimport { PolystatModel } from './polystatmodel';\n\nclass ClickThroughTransformer {\n  static cellName = /\\${__cell_name}/;\n  static cellValue = /\\${__cell}/;\n  static cellRawValue = /\\${__cell:raw}/;\n\n  static nthCellName = /\\${__cell_name_(\\d+)}/;\n  static nthCellValue = /\\${__cell_(\\d+)}/;\n  static nthCellRawValue = /\\${__cell_(\\d+):raw}/;\n\n  static compositeName = /\\${__composite_name}/;\n\n  static tranformSingleMetric(index: number, url: string, data: PolystatModel[]): string {\n    if (isNaN(index)) {\n      return url;\n    }\n    const item = data[index];\n    // check if url contains any dereferencing\n    while (url.match(this.cellName)) {\n      // replace with series name\n      url = url.replace(this.cellName, item.name);\n    }\n    while (url.match(this.cellValue)) {\n      // replace with formatted value, and encoded\n      url = url.replace(this.cellValue, encodeURIComponent(item.valueFormatted));\n    }\n    while (url.match(this.cellRawValue)) {\n      // replace with value\n      url = url.replace(this.cellRawValue, item.value.toString());\n    }\n    return url;\n  }\n\n  static tranformNthMetric(url: string, data: PolystatModel[]) {\n    while (url.match(this.nthCellName)) {\n      const matched = url.match(this.nthCellName);\n      if (matched.length >= 2) {\n        // get the capture number\n        const captureIndex = matched[1];\n        const nthName = data[captureIndex].name;\n        // replace with series name\n        url = url.replace(this.nthCellName, nthName);\n      }\n    }\n    while (url.match(this.nthCellValue)) {\n      const matched = url.match(this.nthCellValue);\n      if (matched.length >= 2) {\n        // get the capture number\n        const captureIndex = matched[1];\n        const nthValue = data[captureIndex].valueFormatted;\n        // replace with formatted value encoded\n        url = url.replace(this.nthCellValue, encodeURIComponent(nthValue));\n      }\n    }\n    while (url.match(this.nthCellRawValue)) {\n      const matched = url.match(this.nthCellRawValue);\n      if (matched.length >= 2) {\n        // get the capture number\n        const captureIndex = matched[1];\n        const nthValue = data[captureIndex].value;\n        // replace with raw value\n        url = url.replace(this.nthCellRawValue, nthValue.toString());\n      }\n    }\n    return url;\n  }\n\n  static tranformComposite(name: string, url: string) {\n    // check if url contains any dereferencing\n    while (url.match(this.compositeName)) {\n      // replace with series name\n      url = url.replace(this.compositeName, name);\n    }\n    return url;\n  }\n}\n\nexport { ClickThroughTransformer };\n","import _ from 'lodash';\nimport kbn from 'grafana/app/core/utils/kbn';\nimport { getThresholdLevelForValue, getValueByStatName } from './threshold_processor';\nimport { ClickThroughTransformer } from './clickThroughTransformer';\nimport { getMappedValue, stringToJsRegex } from '@grafana/data';\nimport { convertOldAngularValueMapping } from '@grafana/ui';\nimport { MetricOverride, PolystatThreshold, PolystatConfigs } from 'types';\nimport { PolystatModel } from './polystatmodel';\n\nexport class MetricOverridesManager {\n  metricOverrides: MetricOverride[];\n  $scope: any;\n  $sanitize: any;\n  templateSrv: any;\n  suggestMetricNames: any;\n  activeOverrideIndex: number;\n  customSplitDelimiter: string;\n\n  constructor($scope, templateSrv, $sanitize, metricOverrides: MetricOverride[]) {\n    this.$scope = $scope;\n    this.$sanitize = $sanitize;\n    this.templateSrv = templateSrv;\n    // note: this delimiter appears to not work when referenced this way\n    // TODO: use this as a constant (test)\n    this.customSplitDelimiter = '#️⃣🔠🆗🆗🔠#️⃣';\n    this.activeOverrideIndex = 0;\n    // typeahead requires this form\n    this.suggestMetricNames = () => {\n      return _.map(this.$scope.ctrl.series, (series) => {\n        return series.alias;\n      });\n    };\n    this.metricOverrides = metricOverrides;\n    // upgrade if no label present\n    for (let index = 0; index < this.metricOverrides.length; index++) {\n      if (typeof this.metricOverrides[index].label === 'undefined') {\n        this.metricOverrides[index].label = 'OVERRIDE ' + (index + 1);\n      }\n    }\n  }\n\n  addMetricOverride() {\n    const override = new MetricOverride();\n    override.label = 'OVERRIDE ' + (this.metricOverrides.length + 1);\n    override.metricName = '';\n    override.thresholds = [];\n    override.colors = [\n      '#299c46', // \"rgba(50, 172, 45, 1)\", // green\n      '#e5ac0e', // \"rgba(237, 129, 40, 1)\", // yellow\n      '#bf1b00', // \"rgba(245, 54, 54, 1)\", // red\n      '#4040a0', // blue\n    ];\n    override.decimals = '';\n    override.enabled = true;\n    override.unitFormat = 'short';\n    override.clickThrough = '';\n    override.operatorName = 'avg';\n    override.scaledDecimals = null;\n    override.prefix = '';\n    override.suffix = '';\n    override.newTabEnabled = true;\n    override.sanitizeURLEnabled = true;\n    this.metricOverrides.push(override);\n  }\n\n  removeMetricOverride(override: MetricOverride) {\n    // lodash _.without creates a new array, need to reassign to the panel where it will be saved\n    this.metricOverrides = _.without(this.metricOverrides, override);\n    // fix the labels\n    for (let index = 0; index < this.metricOverrides.length; index++) {\n      this.metricOverrides[index].label = 'OVERRIDE ' + (index + 1);\n    }\n    // reassign reference in panel\n    this.$scope.ctrl.panel.savedOverrides = this.metricOverrides;\n    this.$scope.ctrl.refresh();\n  }\n\n  metricNameChanged(override: MetricOverride) {\n    // TODO: validate item is a valid regex\n    // console.log(\"metricNameChanged: '\" + override.metricName + \"'\");\n    this.$scope.ctrl.refresh();\n  }\n\n  toggleHide(override: MetricOverride) {\n    override.enabled = !override.enabled;\n    this.$scope.ctrl.refresh();\n  }\n\n  matchOverride(pattern: string): MetricOverride {\n    const resolvedOverrides = this.resolveOverrideTemplates();\n    for (let index = 0; index < resolvedOverrides.length; index++) {\n      const anOverride = resolvedOverrides[index];\n      // TODO: might be needed\n      //const escaped = escapeStringForRegex(anOverride.metricName)\n      //const regex = stringToJsRegex(escaped);\n      const regex = stringToJsRegex(anOverride.metricName);\n      const matches = pattern.match(regex);\n      if (matches && matches.length > 0 && anOverride.enabled) {\n        return resolvedOverrides[index];\n      }\n    }\n    return undefined;\n  }\n\n  resolveOverrideTemplates(): any[] {\n    const ret: any[] = [];\n    const variableRegex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?:\\.([^:^\\}]+))?(?::(\\w+))?}/g;\n    this.metricOverrides.forEach((override) => {\n      // Resolve templates in series names\n      const matchResult = override.metricName.match(variableRegex);\n      if (matchResult && matchResult.length > 0) {\n        matchResult.forEach((template) => {\n          const resolvedSeriesNames = this.templateSrv\n            .replace(template, this.templateSrv.ScopedVars, this.customFormatter)\n            .split('#️⃣🔠🆗🆗🔠#️⃣');\n          //const resolvedSeriesNames = this.templateSrv\n          //  .replace(template, this.templateSrv.ScopedVars, 'raw');\n          resolvedSeriesNames.forEach((seriesName) => {\n            const newName = override.metricName.replace(template, seriesName);\n            ret.push({\n              ...override,\n              metricName: newName,\n            });\n          });\n        });\n      } else {\n        // does not match template, but can match a simple regex\n        ret.push(override);\n      }\n    });\n\n    return ret;\n  }\n\n  customFormatter(value: any) {\n    if (Object.prototype.toString.call(value) === '[object Array]') {\n      return value.join('#️⃣🔠🆗🆗🔠#️⃣');\n    }\n    return value;\n  }\n\n  applyOverrides(data: PolystatModel[]) {\n    const config: PolystatConfigs = this.$scope.ctrl.panel.polystat;\n    for (let index = 0; index < data.length; index++) {\n      const anOverride = this.matchOverride(data[index].name);\n      if (anOverride) {\n        const aSeries = data[index];\n        // set the operators\n        aSeries.operatorName = anOverride.operatorName;\n        const dataValue = getValueByStatName(aSeries.operatorName, aSeries);\n\n        // Use defaults or the specific threshold\n        const thresholds =\n          anOverride.thresholds && anOverride.thresholds.length ? anOverride.thresholds : config.globalThresholds;\n\n        const result = getThresholdLevelForValue(thresholds, dataValue, config.polygonGlobalFillColor);\n        // set value to what was returned\n        data[index].value = dataValue;\n        data[index].color = result.color;\n        data[index].thresholdLevel = result.thresholdLevel;\n        // format it\n        const mappings = convertOldAngularValueMapping(this.$scope.ctrl.panel);\n        const mappedValue = getMappedValue(mappings, data[index].value.toString());\n        if (mappedValue && mappedValue.text !== '') {\n          data[index].valueFormatted = mappedValue.text;\n        } else {\n          const formatFunc = kbn.valueFormats[anOverride.unitFormat];\n          if (formatFunc) {\n            // put the value in quotes to escape \"most\" special characters\n            data[index].valueFormatted = formatFunc(data[index].value, anOverride.decimals, anOverride.scaledDecimals);\n            data[index].valueRounded = kbn.roundValue(data[index].value, anOverride.decimals);\n          }\n        }\n        // copy the threshold data into the object\n        data[index].prefix = anOverride.prefix;\n        data[index].suffix = anOverride.suffix;\n        // set the url, replace template vars\n        if (anOverride.clickThrough && anOverride.clickThrough.length > 0) {\n          let url = this.templateSrv.replace(anOverride.clickThrough, 'text');\n          // apply both types of transforms, one targeted at the data item index, and secondly the nth variant\n          url = ClickThroughTransformer.tranformSingleMetric(index, url, data);\n          url = ClickThroughTransformer.tranformNthMetric(url, data);\n          data[index].clickThrough = url;\n          data[index].newTabEnabled = anOverride.newTabEnabled;\n          data[index].sanitizeURLEnabled = anOverride.sanitizeURLEnabled;\n          if (anOverride.sanitizeURLEnabled) {\n            data[index].sanitizedURL = this.$sanitize(data[index].clickThrough);\n          }\n        }\n      } else if (config.globalThresholds && config.globalThresholds.length) {\n        const result = getThresholdLevelForValue(\n          config.globalThresholds,\n          data[index].value,\n          config.polygonGlobalFillColor\n        );\n        // set value to what was returned\n        data[index].color = result.color;\n        data[index].thresholdLevel = result.thresholdLevel;\n      }\n    }\n  }\n\n  onSetThresholds = (thresholds: PolystatThreshold[]) => {\n    console.log('OVERRIDE (threshold)', thresholds);\n  };\n\n  setUnitFormat(override, subItem) {\n    override.unitFormat = subItem.value;\n  }\n}\n","import _ from 'lodash';\nimport { PolystatModel } from './polystatmodel';\nimport { getWorstSeries } from './threshold_processor';\nimport { ClickThroughTransformer } from './clickThroughTransformer';\nimport { stringToJsRegex, escapeStringForRegex, ScopedVars } from '@grafana/data';\n\nexport class MetricComposite {\n  compositeName: string;\n  displayName: string;\n  members: any[];\n  enabled: boolean;\n  hideMembers: boolean;\n  showName: boolean;\n  showValue: boolean;\n  animateMode: string;\n  thresholdLevel: number;\n  clickThrough: string;\n  newTabEnabled: boolean;\n  sanitizeURLEnabled: boolean;\n  sanitizedURL: string;\n  label: string;\n  isTemplated: boolean;\n  templatedName: string;\n}\n\nexport class CompositesManager {\n  $scope: any;\n  templateSrv: any;\n  $sanitize: any;\n  suggestMetricNames: any;\n  metricComposites: MetricComposite[];\n  subTabIndex: number;\n  customSplitDelimiter: string;\n\n  constructor($scope, templateSrv, $sanitize, savedComposites) {\n    this.$scope = $scope;\n    this.$sanitize = $sanitize;\n    this.templateSrv = templateSrv;\n    this.customSplitDelimiter = '#️⃣🔠🆗🆗🔠#️⃣';\n    this.subTabIndex = 0;\n    // typeahead requires this form\n    this.suggestMetricNames = () => {\n      return _.map(this.$scope.ctrl.series, (series) => {\n        return series.alias;\n      });\n    };\n    this.metricComposites = savedComposites;\n    // upgrade if no label present\n    for (let index = 0; index < this.metricComposites.length; index++) {\n      if (typeof this.metricComposites[index].label === 'undefined') {\n        this.metricComposites[index].label = 'COMPOSITE ' + (index + 1);\n      }\n    }\n  }\n\n  addMetricComposite() {\n    const aComposite = new MetricComposite();\n    aComposite.label = 'COMPOSITE ' + (this.metricComposites.length + 1);\n    aComposite.compositeName = '';\n    aComposite.displayName = '';\n    aComposite.members = [{}];\n    aComposite.enabled = true;\n    aComposite.clickThrough = '';\n    aComposite.hideMembers = true;\n    aComposite.showName = true;\n    aComposite.showValue = true;\n    aComposite.animateMode = 'all';\n    aComposite.thresholdLevel = 0;\n    aComposite.newTabEnabled = true;\n    aComposite.sanitizeURLEnabled = true;\n    aComposite.sanitizedURL = '';\n    this.metricComposites.push(aComposite);\n  }\n\n  removeMetricComposite(item) {\n    // lodash _.without creates a new array, need to reassign to the panel where it will be saved\n    this.metricComposites = _.without(this.metricComposites, item);\n    // fix the labels\n    for (let index = 0; index < this.metricComposites.length; index++) {\n      this.metricComposites[index].label = 'COMPOSITE ' + (index + 1);\n    }\n    // reassign reference in panel\n    this.$scope.ctrl.panel.savedComposites = this.metricComposites;\n    this.$scope.ctrl.refresh();\n  }\n\n  addMetricToComposite(composite) {\n    if (composite.members === undefined) {\n      composite.members = [{}];\n    } else {\n      composite.members.push({});\n    }\n    this.$scope.ctrl.refresh();\n  }\n\n  removeMetricFromComposite(composite, metric) {\n    composite.members = _.without(composite.members, metric);\n    this.$scope.ctrl.refresh();\n  }\n\n  resolveCompositeTemplates(): MetricComposite[] {\n    const ret: MetricComposite[] = [];\n    this.metricComposites.forEach((item: MetricComposite) => {\n      const resolved = this.templateSrv\n        .replace(item.compositeName, this.templateSrv.ScopedVars, this.customFormatter)\n        .split('#️⃣🔠🆗🆗🔠#️⃣');\n      resolved.forEach((newName) => {\n        ret.push({\n          ...item,\n          compositeName: newName,\n          isTemplated: true,\n          templatedName: item.compositeName,\n        });\n      });\n    });\n\n    return ret;\n  }\n\n  customFormatter(value: any) {\n    if (Object.prototype.toString.call(value) === '[object Array]') {\n      return value.join('#️⃣🔠🆗🆗🔠#️⃣');\n    }\n    return value;\n  }\n\n  resolveMemberTemplates(\n    compositeName: string,\n    isTemplated: boolean,\n    templatedName: string,\n    members: any[],\n    vars: ScopedVars[] = this.templateSrv.ScopedVars\n  ): any[] {\n    const ret: any[] = [];\n    const variableRegex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?:\\.([^:^\\}]+))?(?::(\\w+))?}/g;\n    members.forEach((member) => {\n      // Resolve templates in series names\n      if (member.seriesName) {\n        const matchResult = member.seriesName.match(variableRegex);\n        if (matchResult && matchResult.length > 0) {\n          matchResult.forEach((template) => {\n            // if the template contains the composite template, replace it with the compositeName\n            if (isTemplated && template.includes(templatedName)) {\n              // replace it\n              template = template.replace(templatedName, compositeName);\n            }\n            const resolvedSeriesNames = [this.templateSrv.replace(template, vars, 'raw')];\n            resolvedSeriesNames.forEach((seriesName) => {\n              const newName = member.seriesName.replace(matchResult, seriesName);\n              const escapedName = escapeStringForRegex(seriesName);\n              const newSeriesNameEscaped = member.seriesName.replace(matchResult, escapedName);\n\n              ret.push({\n                ...member,\n                seriesName: newName,\n                seriesNameEscaped: newSeriesNameEscaped,\n              });\n            });\n          });\n        } else {\n          ret.push(member);\n        }\n      }\n    });\n\n    return ret;\n  }\n\n  resolveMemberAliasTemplates(name: string, matches: any): string {\n    const templateVars: ScopedVars = {};\n    matches.forEach((name: string, i: number) => {\n      templateVars[i] = { text: i, value: name };\n    });\n    if (matches.groups) {\n      Object.keys(matches.groups).forEach((key) => {\n        templateVars[key.replace(/\\s+/g, '_')] = { text: key, value: matches.groups[key] };\n      });\n    }\n    return this.templateSrv.replace(name, templateVars);\n  }\n\n  applyComposites(data: PolystatModel[]) {\n    const filteredMetrics: number[] = [];\n    const clonedComposites: PolystatModel[] = [];\n    // the composite Name can be a template variable\n    // the composite should only match specific metrics or expanded templated metrics that use the composite name\n    const resolvedComposites = this.resolveCompositeTemplates();\n    for (let i = 0; i < resolvedComposites.length; i++) {\n      const matchedMetrics: number[] = [];\n      const aComposite = resolvedComposites[i];\n      if (!aComposite.enabled) {\n        continue;\n      }\n      let currentWorstSeries = null;\n      // this should filter the members that are matches for the composite name\n      const templatedMembers = this.resolveMemberTemplates(\n        aComposite.compositeName,\n        aComposite.isTemplated,\n        aComposite.templatedName,\n        aComposite.members,\n        {\n          ...this.templateSrv.ScopedVars,\n          compositeName: { text: 'compositeName', value: aComposite.compositeName },\n        }\n      );\n      for (let j = 0; j < templatedMembers.length; j++) {\n        const aMetric = templatedMembers[j];\n        // look for the matches to the pattern in the data\n        for (let index = 0; index < data.length; index++) {\n          // match regex\n          // seriesname may not be defined yet, skip\n          if (typeof aMetric.seriesName === 'undefined') {\n            continue;\n          }\n          // name may not be escaped, check both\n          let metricName = aMetric.seriesName;\n          if (aMetric.seriesNameEscaped !== undefined) {\n            metricName = aMetric.seriesNameEscaped;\n          }\n          const regex = stringToJsRegex(metricName);\n          const matches = regex.exec(data[index].name);\n          if (matches && matches.length > 0) {\n            const seriesItem = data[index];\n            // Template out the name of the metric using the alias\n            if (aMetric.alias && aMetric.alias.length > 0) {\n              seriesItem.displayName = this.resolveMemberAliasTemplates(aMetric.alias, matches);\n            }\n\n            // keep index of the matched metric\n            matchedMetrics.push(index);\n            // only hide if requested\n            if (aComposite.hideMembers) {\n              filteredMetrics.push(index);\n            }\n            if (aComposite.clickThrough && aComposite.clickThrough.length > 0) {\n              // process template variables\n              let url = this.templateSrv.replace(aComposite.clickThrough, 'text');\n              // apply both types of transforms, one targeted at the data item index, and secondly the nth variant\n              url = ClickThroughTransformer.tranformComposite(aComposite.compositeName, url);\n              url = ClickThroughTransformer.tranformSingleMetric(index, url, data);\n              url = ClickThroughTransformer.tranformNthMetric(url, data);\n              seriesItem.clickThrough = url;\n              seriesItem.sanitizedURL = this.$sanitize(url);\n            }\n          }\n        }\n      }\n      if (matchedMetrics.length === 0) {\n        continue;\n      }\n      // now determine the most triggered threshold\n\n      for (let k = 0; k < matchedMetrics.length; k++) {\n        const itemIndex = matchedMetrics[k];\n        const seriesItem = data[itemIndex];\n        // check thresholds\n        if (currentWorstSeries === null) {\n          currentWorstSeries = seriesItem;\n        } else {\n          currentWorstSeries = getWorstSeries(currentWorstSeries, seriesItem);\n        }\n      }\n      // Prefix the valueFormatted with the actual metric name\n      if (currentWorstSeries !== null) {\n        const clone = currentWorstSeries.shallowClone();\n        clone.name = aComposite.compositeName;\n        // tooltip/legend uses this to expand what values are inside the composite\n        for (let index = 0; index < matchedMetrics.length; index++) {\n          const itemIndex = matchedMetrics[index];\n          clone.members.push({\n            ...data[itemIndex],\n            name: data[itemIndex].displayName || data[itemIndex].name,\n          });\n        }\n        clone.thresholdLevel = currentWorstSeries.thresholdLevel;\n        // currentWorstSeries.valueFormatted = currentWorstSeriesName + ': ' + currentWorstSeries.valueFormatted;\n        // now push the composite into data\n        // add the composite seting for showing the name/value to the new cloned model\n        clone.showName = aComposite.showName;\n        clone.showValue = aComposite.showValue;\n        clone.animateMode = aComposite.animateMode;\n        clone.newTabEnabled = aComposite.newTabEnabled;\n        clone.sanitizeURLEnabled = aComposite.sanitizeURLEnabled;\n        // mark this series as a compsite\n        clone.isComposite = true;\n        clonedComposites.push(clone);\n      }\n    }\n    // now merge the clonedComposites into data\n    Array.prototype.push.apply(data, clonedComposites);\n    // sort by value descending\n    filteredMetrics.sort((a, b) => {\n      return b - a;\n    });\n    // now remove the filtered metrics from final list\n    // remove filtered metrics, use splice in reverse order\n    for (let i = data.length; i >= 0; i--) {\n      if (_.includes(filteredMetrics, i)) {\n        data.splice(i, 1);\n      }\n    }\n    return data;\n  }\n\n  metricNameChanged(metric) {\n    // TODO: validate item is a valid regex\n    this.$scope.ctrl.refresh();\n  }\n\n  toggleHide(composite) {\n    composite.enabled = !composite.enabled;\n    this.$scope.ctrl.refresh();\n  }\n}\n","/**\n * Tooltip generation\n */\nimport _ from 'lodash';\nimport { PolystatConfigs } from 'types';\n\nexport class Tooltip {\n  static generate(scope, data, polystat: PolystatConfigs): string[] {\n    const items = [];\n    for (let index = 0; index < data.length; index++) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const time = scope.ctrl.dashboard.formatDate(data[index].timestamp, tooltipTimeFormat);\n      let timestampContent = '';\n      let valueHeadingContent = '';\n      let valueContent = '';\n      if (polystat.tooltipDisplayMode === 'triggered') {\n        const triggeredCount = Tooltip.getTriggeredCount(data[index]);\n        if (triggeredCount === 0) {\n          // use the displaytext instead\n          if (polystat.tooltipTimestampEnabled) {\n            timestampContent = `\n              <div class=\"polystat-panel-tooltip-time\">${time}</div>\n            `;\n          }\n          const content = `\n          <div class=\"polystat-panel-tooltip-displaytext-empty-compositename\">${data[index].name}</div>\n          <div class=\"polystat-panel-tooltip-displaytext-empty\">${polystat.tooltipDisplayTextTriggeredEmpty}</div>\n          ${timestampContent}\n          `;\n          items.push(content);\n          continue;\n        }\n      }\n      if (polystat.tooltipTimestampEnabled) {\n        timestampContent = `\n          <tr>\n            <td colspan=\"2\" style=\"text-align: center;\" class=\"graph-tooltip-time\">${time}</td>\n          </tr>\n        `;\n      }\n      const compositeContent =\n        data[index].displayMode === 'all'\n          ? ''\n          : `\n        <tr>\n          <th colspan=\"2\" style=\"text-align: center;\">${data[index].name}</th>\n        </tr>\n      `;\n      if (polystat.valueEnabled) {\n        valueHeadingContent = `\n        <th style=\"text-align: right;\">Value</th>\n        `;\n      }\n      const content = [\n        `\n        <table width=\"100%\" class=\"polystat-panel-tooltiptable\">\n        <thead>\n          ${compositeContent}\n          <tr>\n            <th style=\"text-align: left;\">Name</th>\n            ${valueHeadingContent}\n          </tr>\n        </thead>\n        <tfoot>\n          ${timestampContent}\n        </tfoot>\n        <tbody>\n      `,\n      ];\n\n      /* Scenarios:\n        tooltip set to trigggered\n          data item has threshold > 0 and zero members, show data item\n          data item members have threshold > 0, show members\n        tooltip set to all\n          data item displayed, or only members displayed\n      */\n      if (data[index].members.length > 0) {\n        // sort members\n        const sortedMembers = _.orderBy(\n          data[index].members,\n          [scope.ctrl.panel.polystat.tooltipPrimarySortField, scope.ctrl.panel.polystat.tooltipSecondarySortField],\n          [\n            scope.ctrl.panel.polystat.tooltipPrimarySortDirection,\n            scope.ctrl.panel.polystat.tooltipSecondarySortDirection,\n          ]\n        );\n        // use new sort method\n        for (let j = 0; j < sortedMembers.length; j++) {\n          const aMember: any = sortedMembers[j];\n          if (polystat.valueEnabled) {\n            valueContent = `\n            <td style=\"text-align: right; padding-left: 8px; color: ${aMember.color}\">${aMember.valueFormatted}</td>\n            `;\n          }\n          const aRow = `\n            <tr>\n              <td style=\"text-align: left; color: ${aMember.color}\">${aMember.name}</td>\n              ${valueContent}\n            </tr>\n          `;\n          switch (polystat.tooltipDisplayMode) {\n            case 'triggered':\n              if (aMember.thresholdLevel !== 0) {\n                content.push(aRow);\n              }\n              break;\n            default:\n              content.push(aRow);\n              break;\n          }\n        }\n      } else {\n        if (polystat.valueEnabled) {\n          valueContent = `\n          <td style=\"text-align: right; padding-left: 8px; color: ${data[index].color}\">${data[index].valueFormatted}</td>\n          `;\n        }\n        const aRow = `\n        <tr>\n          <td style=\"text-align: left; color: ${data[index].color}\">${data[index].name}</td>\n          ${valueContent}\n        </tr>\n        `;\n        switch (polystat.tooltipDisplayMode) {\n          case 'triggered':\n            if (data[index].thresholdLevel !== 0) {\n              content.push(aRow);\n            }\n            break;\n          default:\n            content.push(aRow);\n            break;\n        }\n      }\n      content.push('</tbody></table>');\n      items.push(content.join('\\n'));\n    }\n    return items;\n  }\n  // check all data and all composite members for state != 0\n  static getTriggeredCount(data) {\n    let triggered = 0;\n    if (data.thresholdLevel !== 0) {\n      triggered++;\n    }\n    for (let j = 0; j < data.members.length; j++) {\n      if (data.members[j].thresholdLevel !== 0) {\n        triggered++;\n      }\n    }\n    return triggered;\n  }\n}\n","// from grafana core\nimport _ from 'lodash';\nimport { colors } from '@grafana/ui';\nimport {\n  TimeRange,\n  FieldType,\n  Field,\n  DataFrame,\n  getTimeField,\n  getFieldDisplayName,\n  getColorForTheme,\n} from '@grafana/data';\nimport TimeSeries from 'grafana/app/core/time_series2';\nimport config from 'grafana/app/core/config';\n\ntype Options = {\n  dataList: DataFrame[];\n  range?: TimeRange;\n};\n\nexport class DataProcessor {\n  constructor(private panel: any) {}\n\n  getSeriesList(options: Options): TimeSeries[] {\n    const list: TimeSeries[] = [];\n    const { dataList, range } = options;\n\n    if (!dataList || !dataList.length) {\n      return list;\n    }\n\n    for (let i = 0; i < dataList.length; i++) {\n      const series = dataList[i];\n      const { timeField } = getTimeField(series);\n\n      if (!timeField) {\n        continue;\n      }\n\n      for (let j = 0; j < series.fields.length; j++) {\n        const field = series.fields[j];\n\n        if (field.type !== FieldType.number) {\n          continue;\n        }\n        //field.state.displayName = field.name;\n        const name = getFieldDisplayName(field, series, dataList);\n        const datapoints = [];\n\n        for (let r = 0; r < series.length; r++) {\n          const fieldValues = field.values.get(r);\n          const timeValues = timeField.values.get(r);\n          // make sure there are values, this can end up being undefined\n          if (typeof fieldValues !== undefined) {\n            datapoints.push([fieldValues, timeValues]);\n          }\n        }\n\n        list.push(this.toTimeSeries(field, name, i, j, datapoints, list.length, range));\n      }\n    }\n\n    // Merge all the rows if we want to show a histogram\n    if (this.panel.xaxis.mode === 'histogram' && !this.panel.stack && list.length > 1) {\n      const first = list[0];\n      // @ts-ignore\n      first.alias = first.aliasEscaped = 'Count';\n\n      for (let i = 1; i < list.length; i++) {\n        first.datapoints = first.datapoints.concat(list[i].datapoints);\n      }\n\n      return [first];\n    }\n\n    return list;\n  }\n\n  private toTimeSeries(\n    field: Field,\n    alias: string,\n    dataFrameIndex: number,\n    fieldIndex: number,\n    datapoints: any[][],\n    index: number,\n    range?: TimeRange\n  ) {\n    const colorIndex = index % colors.length;\n    const color = this.panel.aliasColors[alias] || colors[colorIndex];\n\n    const series = new TimeSeries({\n      datapoints: datapoints || [],\n      alias: alias,\n      color: getColorForTheme(color, config.theme),\n      unit: field.config ? field.config.unit : undefined,\n      dataFrameIndex,\n      fieldIndex,\n    });\n\n    if (datapoints && datapoints.length > 0 && range) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = range.from;\n\n      if (last - from.valueOf() < -10000) {\n        // If the data is in reverse order\n        const first = datapoints[0][1];\n        if (first - from.valueOf() < -10000) {\n          series.isOutsideRange = true;\n        }\n      }\n    }\n    return series;\n  }\n}\n","import { DataFrame, Field, FieldType, ArrayVector, Labels } from '@grafana/data';\nimport _ from 'lodash';\n\n// Inserts a \"Time\" field into each dataframe if it is missing\n// the value of the timestamp is \"now\"\n// any field without a numeric type is considered a label\nexport function InsertTime(data: DataFrame[]): DataFrame[] {\n  // TODO: time to insert can be taken from the first row if there are timeseries already\n  // for now, just insert now\n  const timeToInsert = Date.now();\n  const newData: DataFrame[] = [];\n  for (let i = 0; i < data.length; i++) {\n    const frame = data[i];\n    //const flattened = this.flattenLabels(frame, 0);\n    const newFrame = _.cloneDeep(frame);\n    // clear the fields\n    newFrame.fields = [];\n    //const labels = this.getLabelsOfFrame(frame);\n    const hasTimestamp = frameHasTimestamp(frame);\n    // rebuild a new frame with labels on the numerical fields\n    const numFields = frame.fields.length;\n    for (let j = 0; j < numFields; j++) {\n      const aField = frame.fields[j];\n      if (aField.type === FieldType.number) {\n        // need to get the number of rows of data for this frame\n        const rowsOfField = aField.values.toArray().length;\n        if (!hasTimestamp) {\n          for (let rowNum = 0; rowNum < rowsOfField; rowNum++) {\n            // only create a new field when the rowValue is not null\n            if (aField.values.toArray()[rowNum] !== null) {\n              // this has a nonnull value\n              const flattened = flattenLabels(frame, rowNum);\n              const newField = newFieldWithLabels(aField, flattened);\n              const newFieldValues = new ArrayVector();\n              const value = getValueOfField(aField, rowNum);\n              newFieldValues.add(value);\n              newField.values = newFieldValues;\n              newFrame.fields.push(newField);\n            }\n          }\n        } else {\n          // copy the object\n          const copiedField = Object.assign({}, aField);\n          newFrame.fields.push(copiedField);\n        }\n      }\n    }\n    if (!hasTimestamp) {\n      const z = new ArrayVector();\n      z.add(timeToInsert);\n\n      const timeField: Field = {\n        name: 'Time',\n        type: FieldType.time,\n        values: z,\n        config: null,\n      };\n      // insert it\n      newFrame.fields.push(timeField);\n    } else {\n      // time field already exists\n      // copy all non-number fields from original frame\n      for (let j = 0; j < frame.fields.length; j++) {\n        const aField = frame.fields[j];\n        if (aField.type !== FieldType.number) {\n          newFrame.fields.push(aField);\n        }\n      }\n    }\n    newData.push(newFrame);\n  }\n\n  return newData;\n}\n\nfunction frameHasTimestamp(frame: DataFrame): boolean {\n  for (let j = 0; j < frame.fields.length; j++) {\n    const aField = frame.fields[j];\n    if (aField.type === FieldType.time) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction flattenLabels(frame: DataFrame, rowNum: number) {\n  let labelIndexes = [];\n  const numFields = frame.fields.length;\n\n  // first get the fields of type string\n  for (let j = 0; j < numFields; j++) {\n    if (frame.fields[j].type === FieldType.string) {\n      labelIndexes.push(j);\n    }\n  }\n  let labelWithValues = getLabelValues(frame, labelIndexes, rowNum);\n  return labelWithValues;\n}\n\nfunction newFieldWithLabels(field: Field, labels: Labels): Field {\n  const newField = _.cloneDeep(field);\n  newField.labels = labels;\n  return newField;\n}\n\nfunction getValueOfField(field: Field, index: number) {\n  const bufferValue = field.values.toArray()[index];\n  return bufferValue;\n}\n\nfunction getLabelValues(frame: DataFrame, indexes: any[], rowNum: number) {\n  let labelAndValue = {};\n  for (let index = 0; index < indexes.length; index++) {\n    let indexValue = indexes[index];\n    let aField = frame.fields[indexValue];\n    if (aField.type !== FieldType.number) {\n      let value = getValueOfField(aField, rowNum);\n      labelAndValue[aField.name] = value;\n    }\n  }\n  return labelAndValue;\n}\n","import { MetricsPanelCtrl } from 'grafana/app/plugins/sdk';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'grafana/app/core/utils/kbn';\nimport TimeSeries from 'grafana/app/core/time_series2';\n\nimport { D3Wrapper } from './d3wrapper';\nimport { Transformers } from './transformers';\nimport { PolystatModel } from './polystatmodel';\nimport { MetricOverridesManager } from './metric_overrides_manager';\nimport { CompositesManager } from './composites_manager';\nimport { Tooltip } from './tooltip';\nimport { GetDecimalsForValue, RGBToHex, SortVariableValuesByField } from './utils';\nimport { ClickThroughTransformer } from './clickThroughTransformer';\nimport { PolystatConfigs } from 'types';\nimport { convertOldAngularValueMapping } from '@grafana/ui';\nimport { LegacyResponseData, DataFrame, getMappedValue, PanelEvents } from '@grafana/data';\nimport { DataProcessor } from './core/data_processor';\nimport { getProcessedDataFrames } from './core/dataframe';\nimport { InsertTime } from './data/deframer';\nclass D3PolystatPanelCtrl extends MetricsPanelCtrl {\n  processor: DataProcessor;\n  static templateUrl = 'partials/template.html';\n  animationModes = [\n    { value: 'all', text: 'Show All' },\n    { value: 'triggered', text: 'Show Triggered' },\n  ];\n  displayModes = [\n    { value: 'all', text: 'Show All' },\n    { value: 'triggered', text: 'Show Triggered' },\n  ];\n  shapes = [\n    { value: 'hexagon_pointed_top', text: 'Hexagon Pointed Top' },\n    //{ value: 'hexagon_flat_top', text: 'Hexagon Flat Top' },\n    { value: 'circle', text: 'Circle' },\n    //{ value: \"cross\", text: \"Cross\" },\n    //{ value: 'diamond', text: 'Diamond' },\n    { value: 'square', text: 'Square' },\n    //{ value: \"star\", text: \"Star\" },\n    //{ value: \"triangle\", text: \"Triangle\" },\n    //{ value: \"wye\", text: \"Wye\" }\n  ];\n  fontSizes = [\n    4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46,\n    48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70,\n  ];\n  unitFormats = kbn.getUnitFormats();\n  operatorOptions = [\n    { value: 'avg', text: 'Average' },\n    { value: 'count', text: 'Count' },\n    { value: 'current', text: 'Current' },\n    { value: 'delta', text: 'Delta' },\n    { value: 'diff', text: 'Difference' },\n    { value: 'first', text: 'First' },\n    { value: 'logmin', text: 'Log Min' },\n    { value: 'max', text: 'Max' },\n    { value: 'min', text: 'Min' },\n    { value: 'name', text: 'Name' },\n    { value: 'last_time', text: 'Time of Last Point' },\n    { value: 'time_step', text: 'Time Step' },\n    { value: 'total', text: 'Total' },\n  ];\n  sortDirections = [\n    { value: 'asc', text: 'Ascending' },\n    { value: 'desc', text: 'Descending' },\n  ];\n  sortFields = [\n    { value: 'name', text: 'Name' },\n    { value: 'thresholdLevel', text: 'Threshold Level' },\n    { value: 'value', text: 'Value' },\n  ];\n  // new method for sorting same as template vars\n  sortOptions = [\n    { value: 0, text: 'Disabled' },\n    { value: 1, text: 'Alphabetical (asc)' },\n    { value: 2, text: 'Alphabetical (desc)' },\n    { value: 3, text: 'Numerical (asc)' },\n    { value: 4, text: 'Numerical (desc)' },\n    { value: 5, text: 'Alphabetical (case-insensitive, asc)' },\n    { value: 6, text: 'Alphabetical (case-insensitive, desc)' },\n  ];\n\n  dataRaw: any;\n  polystatData: PolystatModel[];\n  initialized: boolean;\n  panelContainer: any;\n  d3Object: D3Wrapper;\n  series: any[];\n  templateSrv: any;\n  overridesCtrl: MetricOverridesManager;\n  compositesManager: CompositesManager;\n  tooltipContent: string[];\n  d3DivId: string;\n  containerDivId: string;\n  svgContainer: any;\n  panelWidth: any;\n  panelHeight: any;\n  panelDefaults = {\n    nullPointMode: 'connected',\n    savedComposites: [],\n    savedOverrides: [], // Array<MetricOverride>(),\n    colors: ['#299c46', '#ED8128', '#d44a3a', '#4040a0'],\n    valueMaps: [{ value: 'null', op: '=', text: 'N/A' }],\n    mappingTypes: [\n      { name: 'value to text', value: 1 },\n      { name: 'range to text', value: 2 },\n    ],\n    rangeMaps: [{ from: 'null', to: 'null', text: 'N/A' }],\n    mappingType: 1,\n    polystat: {\n      animationSpeed: 2500,\n      columns: '',\n      columnAutoSize: true,\n      displayLimit: 100,\n      defaultClickThrough: '',\n      defaultClickThroughNewTab: false,\n      defaultClickThroughSanitize: false,\n      ellipseEnabled: false,\n      ellipseCharacters: 18,\n      fontAutoScale: true,\n      fontSize: 12,\n      fontType: 'Roboto',\n      fontAutoColor: true,\n      globalUnitFormat: 'short',\n      globalDecimals: 2,\n      globalDisplayMode: 'all',\n      globalOperatorName: 'avg',\n      globalDisplayTextTriggeredEmpty: 'OK',\n      gradientEnabled: true,\n      hexagonSortByDirection: 'asc',\n      hexagonSortByField: 'name',\n      maxMetrics: 0,\n      polygonBorderSize: 2,\n      polygonBorderColor: 'black',\n      polygonGlobalFillColor: '#0a50a1',\n      radius: '',\n      radiusAutoSize: true,\n      rows: '',\n      rowAutoSize: true,\n      shape: 'hexagon_pointed_top',\n      tooltipDisplayMode: 'all',\n      tooltipDisplayTextTriggeredEmpty: 'OK',\n      tooltipFontSize: 12,\n      tooltipFontType: 'Roboto',\n      tooltipPrimarySortDirection: 'desc',\n      tooltipPrimarySortField: 'thresholdLevel',\n      tooltipSecondarySortDirection: 'desc',\n      tooltipSecondarySortField: 'value',\n      tooltipTimestampEnabled: true,\n      tooltipEnabled: true,\n      valueEnabled: true,\n    },\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, private $sanitize) {\n    super($scope, $injector);\n    // merge existing settings with our defaults\n    _.defaultsDeep(this.panel, this.panelDefaults);\n    // @ts-ignore\n    this.useDataFrames = true;\n    this.processor = new DataProcessor({\n      xaxis: { mode: 'custom' },\n      aliasColors: {},\n    });\n    this.d3DivId = 'd3_svg_' + this.panel.id;\n    this.containerDivId = 'container_' + this.d3DivId;\n    this.initialized = false;\n    this.panelContainer = null;\n    this.templateSrv = templateSrv;\n    this.svgContainer = null;\n    this.panelWidth = null;\n    this.panelHeight = null;\n    this.polystatData = [] as PolystatModel[];\n    this.d3Object = null;\n    this.series = [];\n    this.tooltipContent = [];\n    // convert old sort method to new\n    this.migrateSortDirections();\n    this.overridesCtrl = new MetricOverridesManager($scope, templateSrv, $sanitize, this.panel.savedOverrides);\n    this.compositesManager = new CompositesManager($scope, templateSrv, $sanitize, this.panel.savedComposites);\n    // events\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataError, this.onDataError.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n  }\n\n  migrateSortDirections() {\n    if (this.panel.polystat.hexagonSortByDirection === 'asc') {\n      this.panel.polystat.hexagonSortByDirection = 1;\n    }\n    if (this.panel.polystat.hexagonSortByDirection === 'desc') {\n      this.panel.polystat.hexagonSortByDirection = 2;\n    }\n    if (this.panel.polystat.tooltipPrimarySortDirection === 'asc') {\n      this.panel.polystat.tooltipPrimarySortDirection = 1;\n    }\n    if (this.panel.polystat.tooltipPrimarySortDirection === 'desc') {\n      this.panel.polystat.tooltipPrimarySortDirection = 2;\n    }\n    if (this.panel.polystat.tooltipSecondarySortDirection === 'asc') {\n      this.panel.polystat.tooltipSecondarySortDirection = 1;\n    }\n    if (this.panel.polystat.tooltipSecondarySortDirection === 'desc') {\n      this.panel.polystat.tooltipSecondarySortDirection = 2;\n    }\n  }\n\n  onInitEditMode() {\n    // determine the path to this plugin base on the name found in panel.type\n    const thisPanelPath = 'public/plugins/' + this.panel.type + '/';\n    // add the relative path to the partial\n    const optionsPath = thisPanelPath + 'partials/editor.options.html';\n    this.addEditorTab('Options', optionsPath, 2);\n    const overridesPath = thisPanelPath + 'partials/editor.overrides.html';\n    this.addEditorTab('Overrides', overridesPath, 3);\n    const compositesPath = thisPanelPath + 'partials/editor.composites.html';\n    this.addEditorTab('Composites', compositesPath, 4);\n    // disabled for now\n    const mappingsPath = thisPanelPath + 'partials/editor.mappings.html';\n    this.addEditorTab('Value Mappings', mappingsPath, 5);\n  }\n\n  /**\n   * [setContainer description]\n   * @param {[type]} container [description]\n   */\n  setContainer(container) {\n    this.panelContainer = container;\n    this.svgContainer = container;\n  }\n\n  // determine the width of a panel by the span and viewport\n  // the link element object can be used to get the width more reliably\n  getPanelWidthFailsafe() {\n    let trueWidth = 0;\n    if (typeof this.panel.gridPos !== 'undefined') {\n      // 24 slots is fullscreen, get the viewport and divide to approximate the width\n      const viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n      const pixelsPerSlot = viewPortWidth / 24;\n      trueWidth = Math.round(this.panel.gridPos.w * pixelsPerSlot);\n      return trueWidth;\n    }\n    // grafana5 - use this.panel.gridPos.w, this.panel.gridPos.h\n    if (typeof this.panel.span === 'undefined') {\n      // check if inside edit mode\n      if (this.editModeInitiated) {\n        // width is clientWidth of document\n        trueWidth = Math.max(document.documentElement.clientWidth, window.innerWidth);\n      } else {\n        // get the width based on the scaled container (v5 needs this)\n        trueWidth = this.panelContainer.offsetParent.clientWidth;\n      }\n    } else {\n      // v4 and previous used fixed spans\n      const viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n      // get the pixels of a span\n      const pixelsPerSpan = viewPortWidth / 12;\n      // multiply num spans by pixelsPerSpan\n      trueWidth = Math.round(this.panel.span * pixelsPerSpan);\n    }\n    return trueWidth;\n  }\n\n  getPanelHeight() {\n    // panel can have a fixed height set via \"General\" tab in panel editor\n    let tmpPanelHeight = this.panel.height;\n    if (typeof tmpPanelHeight === 'undefined' || tmpPanelHeight === '') {\n      // grafana also supplies the height, try to use that if the panel does not have a height\n      tmpPanelHeight = String(this.height);\n      // v4 and earlier define this height, detect span for pre-v5\n      if (typeof this.panel.span !== 'undefined') {\n        // if there is no header, adjust height to use all space available\n        let panelTitleOffset = 20;\n        if (this.panel.title !== '') {\n          panelTitleOffset = 42;\n        }\n        tmpPanelHeight = String(this.containerHeight - panelTitleOffset); // offset for header\n      }\n      if (typeof tmpPanelHeight === 'undefined') {\n        // height still cannot be determined, get it from the row instead\n        tmpPanelHeight = this.row.height;\n        if (typeof tmpPanelHeight === 'undefined') {\n          // last resort - default to 250px (this should never happen)\n          tmpPanelHeight = '250';\n        }\n      }\n    }\n    // replace px\n    tmpPanelHeight = tmpPanelHeight.replace('px', '');\n    // convert to numeric value\n    const actualHeight = parseInt(tmpPanelHeight, 10);\n    return actualHeight;\n  }\n\n  clearSVG() {\n    if ($('#' + this.d3DivId).length) {\n      $('#' + this.d3DivId).remove();\n    }\n    if ($('#' + this.d3DivId + '-panel').length) {\n      $('#' + this.d3DivId + '-panel').remove();\n    }\n    if ($('#' + this.d3DivId + '-tooltip').length) {\n      $('#' + this.d3DivId + '-tooltip').remove();\n    }\n  }\n\n  renderD3() {\n    //this.setValues(this.data);\n    this.clearSVG();\n    if (this.panelWidth === 0) {\n      this.panelWidth = this.getPanelWidthFailsafe();\n    }\n    this.panelHeight = this.getPanelHeight();\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n    const width = this.panelWidth;\n    const height = this.panelHeight;\n\n    margin.top = 0;\n    // pre-v5, with title, set top margin to at least 7px\n    if (typeof this.panel.span !== 'undefined' && this.panel.title !== '') {\n      margin.top = 7;\n    }\n    margin.bottom = 0;\n\n    const config: PolystatConfigs = this.panel.polystat;\n\n    // new attributes may not be defined in older panel definitions\n    if (typeof config.polygonBorderSize === 'undefined') {\n      config.polygonBorderSize = 0;\n    }\n    if (typeof config.polygonBorderColor === 'undefined') {\n      config.polygonBorderColor = 'black';\n    }\n\n    // try deep copy of data so we don't get a reference and leak\n    const copiedData = _.cloneDeep(this.polystatData);\n    const opt = {\n      width: width,\n      height: height,\n      radius: config.radius,\n      radiusAutoSize: config.radiusAutoSize,\n      tooltipFontSize: config.tooltipFontSize,\n      tooltipFontType: config.tooltipFontType,\n      data: copiedData,\n      displayLimit: config.displayLimit,\n      globalDisplayMode: config.globalDisplayMode,\n      columns: config.columns,\n      columnAutoSize: config.columnAutoSize,\n      rows: config.rows,\n      rowAutoSize: config.rowAutoSize,\n      tooltipContent: this.tooltipContent,\n      animationSpeed: config.animationSpeed,\n      defaultClickThrough: this.getDefaultClickThrough(NaN),\n      polystat: config,\n    };\n    this.d3Object = null;\n    this.d3Object = new D3Wrapper(this.templateSrv, this.svgContainer, this.d3DivId, opt);\n    this.d3Object.draw();\n  }\n\n  removeValueMap(map) {\n    const index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n  }\n\n  addValueMap() {\n    this.panel.valueMaps.push({ value: '', op: '=', text: '' });\n  }\n\n  removeRangeMap(rangeMap) {\n    const index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n  }\n\n  addRangeMap() {\n    this.panel.rangeMaps.push({ from: '', to: '', text: '' });\n  }\n\n  // Called for global or override\n  onThresholdsChanged(override?: any) {\n    // Query and reprocess\n    this.panel.refresh();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    if (!scope) {\n      return;\n    }\n    if (!attrs) {\n      return;\n    }\n    const panelByClass = elem.find('.grafana-d3-polystat');\n    panelByClass.append('<div style=\"width: 100%; height: 100%;\" id=\"' + ctrl.containerDivId + '\"></div>');\n    const container = panelByClass[0].childNodes[0];\n    ctrl.setContainer(container);\n\n    elem = elem.find('.grafana-d3-polystat');\n\n    const render = () => {\n      // try to get the width\n      ctrl.panelWidth = elem.width();\n      ctrl.renderD3();\n    };\n    this.events.on(PanelEvents.render, () => {\n      // try to get the width\n      ctrl.panelWidth = elem.width();\n      render();\n      ctrl.renderingCompleted();\n    });\n  }\n\n  setValues(dataList) {\n    this.dataRaw = dataList;\n    // automatically correct transform mode based on data\n    if (this.dataRaw && this.dataRaw.length) {\n      if (this.dataRaw[0].type === 'table') {\n        this.panel.transform = 'table';\n      } else {\n        if (this.dataRaw[0].type === 'docs') {\n          this.panel.transform = 'json';\n        } else {\n          if (this.panel.transform === 'table' || this.panel.transform === 'json') {\n            this.panel.transform = 'timeseries_to_rows';\n          }\n        }\n      }\n    }\n    //this.polystatData = dataList;\n    const config: PolystatConfigs = this.panel.polystat;\n    // ignore the above and use a timeseries\n    this.polystatData.length = 0;\n    if (this.series && this.series.length > 0) {\n      for (let index = 0; index < this.series.length; index++) {\n        const aSeries = this.series[index];\n        const converted = Transformers.TimeSeriesToPolystat(config.globalOperatorName, aSeries);\n        this.polystatData.push(converted);\n      }\n    }\n    // apply global unit formatting and decimals\n    this.applyGlobalFormatting(this.polystatData);\n    // now sort\n    this.polystatData = _.orderBy(\n      this.polystatData,\n      [config.hexagonSortByField],\n      [this.panel.polystat.hexagonSortByDirection]\n    );\n    // this needs to be performed after sorting rules are applied\n    // apply overrides\n    this.overridesCtrl.applyOverrides(this.polystatData);\n    // apply composites, this will filter as needed and set clickthrough\n    this.polystatData = this.compositesManager.applyComposites(this.polystatData);\n    // apply global clickthrough to all items not set\n    for (let index = 0; index < this.polystatData.length; index++) {\n      if (this.polystatData[index].clickThrough.length === 0) {\n        // add the series alias as a var to the clickthroughurl\n        this.polystatData[index].clickThrough = this.getDefaultClickThrough(index);\n        this.polystatData[index].newTabEnabled = config.defaultClickThroughNewTab;\n        this.polystatData[index].sanitizeURLEnabled = config.defaultClickThroughSanitize;\n        this.polystatData[index].sanitizedURL = this.$sanitize(this.polystatData[index].clickThrough);\n      }\n    }\n    // filter out by globalDisplayMode\n    this.polystatData = this.filterByGlobalDisplayMode(this.polystatData);\n    // now sort\n    this.polystatData = SortVariableValuesByField(\n      this.polystatData,\n      'name',\n      this.panel.polystat.hexagonSortByDirection\n    );\n    this.polystatData = _.orderBy(this.polystatData, this.sortByField([this.panel.polystat.hexagonSortByField]), [\n      this.panel.polystat.hexagonSortByDirection,\n    ]);\n    // generate tooltips\n    this.tooltipContent = Tooltip.generate(this.$scope, this.polystatData, config);\n  }\n\n  sortByField(o: any) {\n    if (isNaN(o.name)) {\n      return o.name;\n    } else {\n      return Number(o.name);\n    }\n  }\n\n  applyGlobalFormatting(data: any) {\n    const mappings = convertOldAngularValueMapping(this.panel);\n    for (let index = 0; index < data.length; index++) {\n      // Check for mapped value, if nothing set, format value\n      const mappedValue = getMappedValue(mappings, data[index].value.toString());\n      if (mappedValue && mappedValue.text !== '') {\n        data[index].valueFormatted = mappedValue.text;\n      } else {\n        const formatFunc = kbn.valueFormats[this.panel.polystat.globalUnitFormat];\n        if (formatFunc) {\n          const result = GetDecimalsForValue(data[index].value, this.panel.polystat.globalDecimals);\n          data[index].valueFormatted = formatFunc(data[index].value, result.decimals, result.scaledDecimals);\n          data[index].valueRounded = kbn.roundValue(data[index].value, result.decimals);\n        }\n      }\n      // default the color to the global setting\n      data[index].color = this.panel.polystat.polygonGlobalFillColor;\n    }\n  }\n\n  filterByGlobalDisplayMode(data: any) {\n    const filteredMetrics: number[] = [];\n    const compositeMetrics: PolystatModel[] = [];\n    if (this.panel.polystat.globalDisplayMode !== 'all') {\n      const dataLen = data.length;\n      for (let i = 0; i < dataLen; i++) {\n        const item = data[i];\n        // keep if composite\n        if (item.isComposite) {\n          compositeMetrics.push(item);\n        }\n        if (item.thresholdLevel < 1) {\n          // push the index number\n          filteredMetrics.push(i);\n        }\n      }\n      // remove filtered metrics, use splice in reverse order\n      for (let i = data.length; i >= 0; i--) {\n        if (_.includes(filteredMetrics, i)) {\n          data.splice(i, 1);\n        }\n      }\n      if (data.length === 0) {\n        if (compositeMetrics.length > 0) {\n          // set data to be all of the composites\n          data = compositeMetrics;\n        }\n      }\n    }\n    return data;\n  }\n\n  onDataError(err: DataFrame[]) {\n    console.log(err);\n    this.onDataFramesReceived([]);\n    //this.onDataReceived([]);\n    this.render();\n  }\n\n  onSnapshotLoad(dataList: LegacyResponseData[]) {\n    this.onDataFramesReceived(getProcessedDataFrames(dataList));\n  }\n\n  seriesToPolystat(globalOperatorName: string, data: any) {\n    const converted = Transformers.TimeSeriesToPolystat(globalOperatorName, data);\n    return converted;\n  }\n\n  tableToPolystat(globalOperatorName: string, data: any) {\n    return null;\n  }\n\n  onDataReceived(data: any) {\n    const allData: PolystatModel[] = [];\n    const config: PolystatConfigs = this.panel.polystat;\n    for (let i = 0; i < data.length; i++) {\n      const item = data[i];\n      switch (item.type) {\n        case 'table':\n          const tableConverted = this.tableToPolystat(config.globalOperatorName, item);\n          if (tableConverted) {\n            allData.push(tableConverted);\n          }\n          break;\n        default:\n          const seriesConverted = this.seriesToPolystat(config.globalOperatorName, item);\n          if (seriesConverted) {\n            allData.push(seriesConverted);\n          }\n          break;\n      }\n    }\n    this.setValues(allData);\n    this.render();\n  }\n\n  onDataFramesReceived(data: DataFrame[]) {\n    //console.log(JSON.stringify(data));\n    // check if data contains a field called Time of type time\n    data = InsertTime(data);\n    // if it does not, insert one with time \"now\"\n    this.series = this.processor.getSeriesList({ dataList: data, range: this.range }).map((ts) => {\n      ts.color = undefined; // remove whatever the processor set\n      // TODO: this needs to be added to the editor options\n      ts.flotpairs = ts.getFlotPairs(this.panel.nullPointMode);\n      return ts;\n    });\n\n    // @ts-ignore\n    this.dataWarning = null;\n    const datapointsCount = _.reduce(\n      this.series,\n      (sum, series) => {\n        return sum + series.datapoints.length;\n      },\n      0\n    );\n\n    if (datapointsCount === 0) {\n      // @ts-ignore\n      this.dataWarning = {\n        title: 'No data points',\n        tip: 'No datapoints returned from data query',\n      };\n    } else {\n      for (const series of this.series) {\n        if (series.isOutsideRange) {\n          // @ts-ignore\n          this.dataWarning = {\n            title: 'Data points outside time range',\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\n          };\n          break;\n        }\n      }\n    }\n    const dataNew = {\n      value: 0,\n      valueFormatted: 0,\n      valueRounded: 0,\n    };\n    this.setValues(dataNew);\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  invertColorOrder() {\n    const tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n\n  /**\n   * Speed must not be less than 500ms\n   */\n  validateAnimationSpeed() {\n    const speed = this.panel.polystat.animationSpeed;\n    let newSpeed = 5000;\n    if (speed) {\n      if (!isNaN(parseInt(speed, 10))) {\n        const checkSpeed = parseInt(speed, 10);\n        if (checkSpeed >= 500) {\n          newSpeed = checkSpeed;\n        } else {\n          // Min speed is 500\n          newSpeed = 500;\n        }\n      }\n    }\n    this.panel.polystat.animationSpeed = newSpeed;\n    this.render();\n  }\n\n  validateDisplayLimit() {\n    const limit = this.panel.polystat.displayLimit;\n    let newLimit = 100;\n    if (limit === null) {\n      newLimit = 0;\n    } else {\n      if (!isNaN(parseInt(limit, 10))) {\n        const checkLimit = parseInt(limit, 10);\n        if (checkLimit >= 0) {\n          newLimit = checkLimit;\n        }\n      }\n    }\n    // 0 means unlimited\n    if (newLimit === 0) {\n      this.panel.polystat.displayLimit = '';\n    } else {\n      this.panel.polystat.displayLimit = newLimit;\n    }\n    this.render();\n  }\n\n  validateColumnValue() {\n    if (this.panel.polystat.columnAutoSize) {\n      this.panel.polystat.columns = '';\n    } else {\n      const columns = this.panel.polystat.columns;\n      let newColumns = 1;\n      if (columns) {\n        if (!isNaN(parseInt(columns, 10))) {\n          const checkColumns = parseInt(columns, 10);\n          if (checkColumns > 0) {\n            newColumns = checkColumns;\n          }\n        }\n      }\n      this.panel.polystat.columns = newColumns;\n    }\n    this.render();\n  }\n\n  validateRowValue() {\n    if (this.panel.polystat.rowAutoSize) {\n      this.panel.polystat.rows = '';\n    } else {\n      const rows = this.panel.polystat.rows;\n      let newRows = 1;\n      if (rows) {\n        if (!isNaN(parseInt(rows, 10))) {\n          const checkRows = parseInt(rows, 10);\n          if (checkRows > 0) {\n            newRows = checkRows;\n          }\n        }\n      }\n      this.panel.polystat.rows = newRows;\n    }\n    this.render();\n  }\n\n  validateRadiusValue() {\n    if (this.panel.polystat.radiusAutoSize) {\n      this.panel.polystat.radius = '';\n    } else {\n      const radius = this.panel.polystat.radius;\n      let newRadius = 25;\n      if (radius !== null) {\n        if (!isNaN(parseInt(radius, 10))) {\n          const checkRadius = parseInt(radius, 10);\n          if (checkRadius > 0) {\n            newRadius = checkRadius;\n          }\n        }\n      }\n      this.panel.polystat.radius = newRadius;\n    }\n    this.render();\n  }\n\n  validateFontColorValue() {\n    if (this.panel.polystat.fontAutoColor) {\n      this.panel.polystat.fontColor = '';\n    } else if (!this.panel.polystat.fontColor) {\n      this.panel.polystat.fontColor = 'black';\n    }\n\n    this.render();\n  }\n\n  validateBorderSizeValue() {\n    const borderSize = this.panel.polystat.polygonBorderSize;\n    let newBorderSize = 2;\n    if (borderSize !== null) {\n      if (!isNaN(parseInt(borderSize, 10))) {\n        const checkBorderSize = parseInt(borderSize, 10);\n        if (checkBorderSize >= 0) {\n          newBorderSize = checkBorderSize;\n        }\n      }\n    }\n    this.panel.polystat.polygonBorderSize = newBorderSize;\n    this.render();\n  }\n\n  updatePolygonBorderColor() {\n    this.panel.polystat.polygonBorderColor = RGBToHex(this.panel.polystat.polygonBorderColor);\n    this.render();\n  }\n\n  updatePolygonGlobalFillColor() {\n    this.panel.polystat.polygonGlobalFillColor = RGBToHex(this.panel.polystat.polygonGlobalFillColor);\n    this.render();\n  }\n\n  getDefaultClickThrough(index: number) {\n    let url = this.panel.polystat.defaultClickThrough;\n    // apply both types of transforms, one targeted at the data item index, and secondly the nth variant\n    url = ClickThroughTransformer.tranformSingleMetric(index, url, this.polystatData);\n    url = ClickThroughTransformer.tranformNthMetric(url, this.polystatData);\n    // process template variables inside clickthrough\n    url = this.templateSrv.replace(url, 'text');\n    return url;\n  }\n\n  setGlobalUnitFormat(subItem) {\n    this.panel.polystat.globalUnitFormat = subItem.value;\n  }\n}\n\nexport { D3PolystatPanelCtrl, D3PolystatPanelCtrl as MetricsPanelCtrl };\n","// from grafana core\n\nimport { map as isArray } from 'lodash';\nimport { DataFrame, DataQueryResponseData, guessFieldTypes, toDataFrame } from '@grafana/data';\n\nexport function getProcessedDataFrames(results?: DataQueryResponseData[]): DataFrame[] {\n  if (!results || !isArray(results)) {\n    return [];\n  }\n\n  const dataFrames: DataFrame[] = [];\n\n  for (const result of results) {\n    const dataFrame = guessFieldTypes(toDataFrame(result));\n\n    if (dataFrame.fields && dataFrame.fields.length) {\n      // clear out the cached info\n      for (const field of dataFrame.fields) {\n        field.state = null;\n      }\n    }\n\n    dataFrames.push(dataFrame);\n  }\n\n  return dataFrames;\n}\n","import _ from 'lodash';\n\nimport coreModule from 'grafana/app/core/core_module';\nimport { PolystatThreshold } from 'types';\nimport { RGBToHex } from 'utils';\n\nexport class ThresholdsCtrl {\n  thresholdStates = [\n    { value: 0, text: 'ok' },\n    { value: 1, text: 'warning' },\n    { value: 2, text: 'critical' },\n    { value: 3, text: 'custom' },\n  ];\n\n  thresholds: PolystatThreshold[] = [];\n\n  /** @ngInject */\n  constructor(private $scope: any) {\n    if ($scope.thresholds) {\n      this.thresholds = [...$scope.thresholds];\n    }\n  }\n\n  private sortThresholds() {\n    this.thresholds = _.orderBy(this.thresholds, ['value'], ['asc']);\n  }\n\n  private doRefresh() {\n    if (this.thresholds && this.thresholds.length) {\n      this.$scope.thresholds = this.thresholds;\n    } else {\n      this.$scope.thresholds = undefined;\n    }\n    this.$scope.callback();\n  }\n\n  addThreshold() {\n    this.thresholds.push({\n      value: 0,\n      state: 0,\n      color: '#299c46',\n    });\n    this.sortThresholds();\n    this.doRefresh();\n  }\n\n  // store user selection of color to be used for all items with the corresponding state\n  setThresholdColor(threshold: PolystatThreshold) {\n    threshold.color = RGBToHex(threshold.color);\n    this.doRefresh();\n  }\n\n  updateThresholdColor(threshold: PolystatThreshold) {\n    const colors = this.$scope.colors;\n    // threshold.state determines the color used\n    threshold.color = colors[threshold.state];\n    this.doRefresh();\n  }\n\n  removeThreshold(threshold: PolystatThreshold) {\n    this.thresholds = _.without(this.thresholds, threshold);\n    this.sortThresholds();\n    this.doRefresh();\n  }\n}\n\nexport function polyThresholds() {\n  return {\n    controller: ThresholdsCtrl,\n    controllerAs: 'ctrl',\n    restrict: 'E',\n    scope: {\n      thresholds: '=',\n      colors: '=',\n      override: '=?',\n      callback: '&',\n    },\n    templateUrl: './public/plugins/grafana-polystat-panel/partials/thresholds.html',\n  };\n}\ncoreModule.directive('polyThresholds', polyThresholds);\n","import { D3PolystatPanelCtrl } from './ctrl';\nimport { loadPluginCss } from 'grafana/app/plugins/sdk';\n\n// Registers an angular directive\nimport 'thresholdsCtrl';\n\nloadPluginCss({\n  dark: 'plugins/grafana-polystat-panel/styles/dark.css',\n  light: 'plugins/grafana-polystat-panel/styles/light.css',\n});\n\nexport { D3PolystatPanelCtrl as PanelCtrl };\n"],"sourceRoot":""}